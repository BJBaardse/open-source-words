keymaster js keymaster is a simple micro library for defining and dispatching keyboard shortcuts in web applications it has no dependencies its a work in progress e g beta so spare me your nerdrage and instead contribute patches are welcome but they are not guaranteed to make it in usage include keymaster js in your web app by loading it as usual html script src keymaster js script keymaster has no dependencies and can be used completely standalone it should not interfere with any javascript libraries or frameworks preferably use a minified version that fits your workflow you can run make to have uglifyjs if you have it installed create a keymaster min js file for you defining shortcuts one global method is exposed key which defines shortcuts when called directly javascript define short of a key a function alert you pressed a returning false stops the event and prevents default browser events key ctrl r function alert stopped reload return false multiple shortcuts that do the same thing key ⌘ r ctrl r function the handler method is called with two arguments set the keydown event fired and an object containing among others the following two properties shortcut a string that contains the shortcut used e g ctrl r scope a string describing the scope or all javascript key ⌘ r ctrl r function event handler console log handler shortcut handler scope ctrl r all supported keys keymaster understands the following modifiers ⇧ shift option ⌥ alt ctrl control command and ⌘ the following special keys can be used for shortcuts backspace tab clear enter return esc escape space up down left right home end pageup pagedown del delete and f1 through f19 modifier key queries at any point in time even in code other than key shortcut handlers you can query the key object for the state of any keys this allows easy implementation of things like shift click handlers for example key shift is true if the shift key is currently pressed javascript if key shift alert shift is pressed omgz other key queries at any point in time even in code other than key shortcut handlers you can query the key object for the state of any key this is very helpful for game development using a game loop for example key ispressed 77 is true if the m key is currently pressed javascript if key ispressed m alert m key is pressed can ya believe it if key ispressed 77 alert m key is pressed can ya believe it you can also get these as an array using javascript key getpressedkeycodes returns an array of key codes currently pressed scopes if you want to reuse the same shortcut for separate areas in your single page app keymaster supports switching between scopes use the key setscope method to set scope javascript define shortcuts with a scope key o enter issues function do something key o enter files function do something else set the scope only all and issues shortcuts will be honored key setscope issues default scope is all remove all events that are set in issues scope key deletescope issues filter key presses by default when an input select or textarea element is focused keymaster doesnt process any shortcuts you can change this by overwriting key filter with a new function this function is called before keymaster processes shortcuts with the keydown event as argument if your function returns false then the no shortcuts will be processed heres the default implementation for reference javascript function filter event var tagname event target event srcelement tagname return tagname input tagname select tagname textarea if you only want some shortcuts to work while in an input element you can change the scope in the key filter function heres an example implementation setting the scope to either input or other dont forget to return true so the any shortcuts get processed javascript key filter function event var tagname event target event srcelement tagname key setscope input textarea select test tagname input other return true however a more robust way to handle this is to use proper focus and blur event handlers on your input element and change scopes there as you see fit noconflict mode you can call key noconflict to remove the key function from global scope and restore whatever key was defined to before keymaster was loaded calling key noconflict will return the keymaster key function javascript var k key noconflict k a function key typeerror undefined is not a function unbinding shortcuts similar to defining shortcuts they can be unbound using key unbind javascript unbind a handler key unbind a unbind a key only for a single scope when no scope is specified it defaults to the current scope key getscope key unbind o enter issues key unbind o enter files notes keymaster should work with any browser that fires keyup and keydown events and is tested with ie 6 safari firefox and chrome see http madrobby github com keymaster for a live demo coffeescript if youre using coffeescript configuring key shortcuts couldnt be simpler coffeescript key a alert you pressed a key ⌘ r ctrl r alert stopped reload off key o enter issues whatevs alert shift is pressed omgz if key shift contributing to contribute please fork keymaster add your patch and tests for it in the test folder and submit a pull request todos finish test suite keymaster is c 2011 2013 thomas fuchs and may be freely distributed under the mit license see the mit license file