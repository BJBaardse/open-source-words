phpredis the phpredis extension provides an api for communicating with the redis key value store it is released under the php license version 3 01 this code has been developed and maintained by owlient from november 2009 to march 2011 you can send comments patches questions here on github to n favrefelix gmail com yowgi to michael grunder gmail com grumi78 or to p yatsukhnenko gmail com yatsukhnenko table of contents installing configuring installation installation on osx building on windows php session handler distributed redis array classes and methods usage connection server keys and strings hashes lists sets sorted sets geocoding pub sub transactions scripting introspection installing configuring everything you should need to install phpredis on your system installation phpize configure enable redis igbinary make make install if you would like phpredis to serialize your data using the igbinary library run configure with enable redis igbinary make install copies redis so to an appropriate location but you still need to enable the module in the php config file to do so either edit your php ini or add a redis ini file in etc php5 conf d with the following contents extension redis so you can generate a debian package for php5 accessible from apache 2 by running mkdeb apache2 sh or with dpkg buildpackage or svn buildpackage this extension exports a single class redis and redisexception used in case of errors check out https github com ukko phpredis phpdoc for a php stub that you can use in your ide for code completion installation on osx if the install fails on osx type the following commands in your shell before trying again macosx deployment target 10 6 cflags arch i386 arch x86 64 g os pipe no cpp precomp ccflags arch i386 arch x86 64 g os pipe cxxflags arch i386 arch x86 64 g os pipe ldflags arch i386 arch x86 64 bind at load export cflags cxxflags ldflags ccflags macosx deployment target if that still fails and you are running zend server ce try this right before make configure cflags arch i386 taken from compiling phpredis on zend server ce osx see also install redis php extension phpredis with macports you can install it using homebrew get homebrew php brew install php55 redis or php53 redis php54 redis php session handler phpredis can be used to store php sessions to do this configure session save handler and session save path in your php ini to tell phpredis where to store the sessions session save handler redis session save path tcp host1 6379 weight 1 tcp host2 6379 weight 2 timeout 2 5 tcp host3 6379 weight 2 read timeout 2 5 session save path can have a simple host port format too but you need to provide the tcp scheme if you want to use the parameters the following parameters are available weight integer the weight of a host is used in comparison with the others in order to customize the session distribution on several hosts if host a has twice the weight of host b it will get twice the amount of sessions in the example host1 stores 20 of all the sessions 1 1 2 2 while host2 and host3 each store 40 2 1 2 2 the target host is determined once and for all at the start of the session and doesnt change the default weight is 1 timeout float the connection timeout to a redis host expressed in seconds if the host is unreachable in that amount of time the session storage will be unavailable for the client the default timeout is very high 86400 seconds persistent integer should be 1 or 0 defines if a persistent connection should be used experimental setting prefix string defaults to phpredis session used as a prefix to the redis key in which the session is stored the key is composed of the prefix followed by the session id auth string empty by default used to authenticate with the server prior to sending commands database integer selects a different database sessions have a lifetime expressed in seconds and stored in the ini variable session gc maxlifetime you can change it with ini set the session handler requires a version of redis with the setex command at least 2 0 phpredis can also connect to a unix domain socket session save path unix var run redis redis sock persistent 1 weight 1 database 0 building on windows see instructions from char101 on how to build phpredis on windows distributed redis array see dedicated page redis cluster support see dedicated page running the unit tests phpredis uses a small custom unit test suite for testing functionality of the various classes to run tests simply do the following run tests for redis class note this is the default php tests testredis php class redis run tests for redisarray class tests mkring sh start php tests testredis php class redisarray tests mkring sh stop run tests for the rediscluster class tests make cluster sh start php tests testredis php class rediscluster tests make cluster sh stop note that it is possible to run only tests which match a substring of the test itself by passing the additional argument test when invoking just run the echo test php tests testredis php class redis test echo classes and methods usage class redis class redisexception predefined constants class redis description creates a redis client example redis new redis class redisexception phpredis throws a redisexception object if it cant reach the redis server that can happen in case of connectivity issues if the redis service is down or if the redis host is overloaded in any other problematic case that does not involve an unreachable server such as a key not existing an invalid command etc phpredis will return false predefined constants description available redis constants redis data types as returned by type redis redis string string redis redis set set redis redis list list redis redis zset sorted set redis redis hash hash redis redis not found not found other todo opt serializer after before connection connect open connect to a server pconnect popen connect to a server persistent auth authenticate to the server select change the selected database for the current connection swapdb swaps two redis databases close close the connection setoption set client option getoption get client option ping ping the server echo echo the given string connect open description connects to a redis instance parameters host string can be a host or the path to a unix domain socket port int optional timeout float value in seconds optional default is 0 meaning unlimited reserved should be null if retry interval is specified retry interval int value in milliseconds optional read timeout float value in seconds optional default is 0 meaning unlimited return value bool true on success false on error example redis connect 127 0 0 1 6379 redis connect 127 0 0 1 port 6379 by default redis connect 127 0 0 1 6379 2 5 2 5 sec timeout redis connect tmp redis sock unix domain socket redis connect 127 0 0 1 6379 1 null 100 1 sec timeout 100ms delay between reconnection attempts pconnect popen description connects to a redis instance or reuse a connection already established with pconnect popen the connection will not be closed on close or end of request until the php process ends so be prepared for too many open fds errors specially on redis server side when using persistent connections on many servers connecting to one redis server also more than one persistent connection can be made identified by either host port timeout or host persistent id or unix socket timeout this feature is not available in threaded versions pconnect and popen then working like their non persistent equivalents parameters host string can be a host or the path to a unix domain socket port int optional timeout float value in seconds optional default is 0 meaning unlimited persistent id string identity for the requested persistent connection retry interval int value in milliseconds optional read timeout float value in seconds optional default is 0 meaning unlimited return value bool true on success false on error example redis pconnect 127 0 0 1 6379 redis pconnect 127 0 0 1 port 6379 by default same connection like before redis pconnect 127 0 0 1 6379 2 5 2 5 sec timeout and would be another connection than the two before redis pconnect 127 0 0 1 6379 2 5 x x is sent as persistent id and would be another connection than the three before redis pconnect tmp redis sock unix domain socket would be another connection than the four before auth description authenticate the connection using a password warning the password is sent in plain text over the network parameters string password return value bool true if the connection is authenticated false otherwise example redis auth foobared select description change the selected database for the current connection parameters integer dbindex the database number to switch to return value true in case of success false in case of failure example see method for example move swapdb description swap one redis database with another atomically parameters integer db1 integer db2 return value true on success and false on failure note requires redis 4 0 0 example redis swapdb 0 1 swaps db 0 with db 1 atomically close description disconnects from the redis instance except when pconnect is used setoption description set client option parameters parameter name parameter value return value bool true on success false on error example redis setoption redis opt serializer redis serializer none dont serialize data redis setoption redis opt serializer redis serializer php use built in serialize unserialize redis setoption redis opt serializer redis serializer igbinary use igbinary serialize unserialize redis setoption redis opt prefix myappname use custom prefix on all keys options for the scan family of commands indicating whether to abstract empty results from the user if set to scan noretry the default phpredis will just issue one scan command at a time sometimes returning an empty array of results if set to scan retry phpredis will retry the scan command until keys come back or redis returns an iterator of zero redis setoption redis opt scan redis scan noretry redis setoption redis opt scan redis scan retry getoption description get client option parameters parameter name return value parameter value example redis getoption redis opt serializer return redis serializer none redis serializer php or redis serializer igbinary ping description check the current connection status parameters none return value string pong on success throws a redisexception object on connectivity error as described above echo description sends a string to redis which replies with the same string parameters string the message to send return value string the same message server bgrewriteaof asynchronously rewrite the append only file bgsave asynchronously save the dataset to disk in background config get or set the redis server configuration parameters dbsize return the number of keys in selected database flushall remove all keys from all databases flushdb remove all keys from the current database info get information and statistics about the server lastsave get the timestamp of the last disk save resetstat reset the stats returned by info method save synchronously save the dataset to disk wait to complete slaveof make the server a slave of another instance or promote it to master time return the current server time slowlog access the redis slowlog entries bgrewriteaof description start the background rewrite of aof append only file parameters none return value bool true in case of success false in case of failure example redis bgrewriteaof bgsave description asynchronously save the dataset to disk in background parameters none return value bool true in case of success false in case of failure if a save is already running this command will fail and return false example redis bgsave config description get or set the redis server configuration parameters parameters operation string either get or set key string for set glob pattern for get see http redis io commands config get for examples value optional string only for set return value associative array for get key value bool for set examples redis config get max entries redis config set dir var run redis dumps dbsize description return the number of keys in selected database parameters none return value integer db size in number of keys example count redis dbsize echo redis has count keys\n flushall description remove all keys from all databases parameters none return value bool always true example redis flushall flushdb description remove all keys from the current database parameters none return value bool always true example redis flushdb info description get information and statistics about the server returns an associative array that provides information about the server passing no arguments to info will call the standard redis info command which returns information such as the following redis version arch bits uptime in seconds uptime in days connected clients connected slaves used memory changes since last save bgsave in progress last save time total connections received total commands processed role you can pass a variety of options to info per the redis documentation which will modify what is returned parameters option the option to provide redis e g commandstats cpu example redis info standard redis info command redis info commandstats information on the commands that have been run 2 6 only redis info cpu just cpu information from redis info lastsave description returns the timestamp of the last disk save parameters none return value int timestamp example redis lastsave resetstat description reset the stats returned by info method these are the counters that are reset keyspace hits keyspace misses number of commands processed number of connections received number of expired keys parameters none return value bool true in case of success false in case of failure example redis resetstat save description synchronously save the dataset to disk wait to complete parameters none return value bool true in case of success false in case of failure if a save is already running this command will fail and return false example redis save slaveof description changes the slave status parameters either host string and port int or no parameter to stop being a slave return value bool true in case of success false in case of failure example redis slaveof 10 0 1 7 6379 redis slaveof time description return the current server time parameters none return value if successful the time will come back as an associative array with element zero being the unix timestamp and element one being microseconds examples redis time slowlog description access the redis slowlog parameters operation string this can be either get len or reset length integer optional if executing a slowlog get command you can pass an optional length return value the return value of slowlog will depend on which operation was performed slowlog get array of slowlog entries as provided by redis sloglog len integer the length of the slowlog slowlog reset boolean depending on success examples get ten slowlog entries redis slowlog get 10 get the default number of slowlog entries redis slowlog get reset our slowlog redis slowlog reset retrieve slowlog length redis slowlog len keys and strings strings append append a value to a key bitcount count set bits in a string bitop perform bitwise operations between strings decr decrby decrement the value of a key get get the value of a key getbit returns the bit value at offset in the string value stored at key getrange get a substring of the string stored at a key getset set the string value of a key and return its old value incr incrby increment the value of a key incrbyfloat increment the float value of a key by the given amount mget getmultiple get the values of all the given keys mset msetnx set multiple keys to multiple values set set the string value of a key setbit sets or clears the bit at offset in the string value stored at key setex psetex set the value and expiration of a key setnx set the value of a key only if the key does not exist setrange overwrite part of a string at key starting at the specified offset strlen get the length of the value stored in a key keys del delete unlink delete a key dump return a serialized version of the value stored at the specified key exists determine if a key exists expire settimeout pexpire set a keys time to live in seconds expireat pexpireat set the expiration for a key as a unix timestamp keys getkeys find all keys matching the given pattern scan scan for keys in the keyspace redis 2 8 0 migrate atomically transfer a key from a redis instance to another one move move a key to another database object inspect the internals of redis objects persist remove the expiration from a key randomkey return a random key from the keyspace rename renamekey rename a key renamenx rename a key only if the new key does not exist type determine the type stored at key sort sort the elements in a list set or sorted set ttl pttl get the time to live for a key restore create a key using the provided serialized value previously obtained with dump get description get the value related to the specified key parameters key return value string or bool if key didnt exist false is returned otherwise the value related to this key is returned examples redis get key set description set the string value in argument as value of the key if youre using redis 2 6 12 you can pass extended options as explained below parameters key value timeout or options array optional if you pass an integer phpredis will redirect to setex and will try to use redis 2 6 12 extended options if you pass an array with valid values return value bool true if the command is successful examples simple key value set redis set key value will redirect and actually make an setex call redis set key value 10 will set the key if it doesnt exist with a ttl of 10 seconds redis set key value array nx ex 10 will set a key if it does exist with a ttl of 1000 miliseconds redis set key value array xx px 1000 setex psetex description set the string value in argument as value of the key with a time to live psetex uses a ttl in milliseconds parameters key ttl value return value bool true if the command is successful examples redis setex key 3600 value sets key → value with 1h ttl redis psetex key 100 value sets key → value with 0 1 sec ttl setnx description set the string value in argument as value of the key if the key doesnt already exist in the database parameters key value return value bool true in case of success false in case of failure examples redis setnx key value return true redis setnx key value return false del delete unlink description remove specified keys parameters an array of keys or an undefined number of parameters each a key key1 key2 key3 keyn note if you are connecting to redis server 4 0 0 you can remove a key with the unlink method in the exact same way you would use del the redis unlink command is non blocking and will perform the actual deletion asynchronously return value long number of keys deleted examples redis set key1 val1 redis set key2 val2 redis set key3 val3 redis set key4 val4 redis delete key1 key2 return 2 redis delete array key3 key4 return 2 if using redis 4 0 0 you can call unlink redis unlink key1 key2 redis unlink array key1 key2 exists description verify if the specified key exists parameters key return value long the number of keys tested that do exist examples redis set key value redis exists key 1 redis exists nonexistingkey 0 redis mset foo foo bar bar baz baz redis exists foo bar baz 3 redis exists foo bar baz 3 note this function took a single argument and returned true or false in phpredis versions 4 0 0 incr incrby description increment the number stored at key by one if the second argument is filled it will be used as the integer value of the increment parameters key value value that will be added to key only for incrby return value int the new value examples redis incr key1 key1 didnt exists set to 0 before the increment and now has the value 1 redis incr key1 2 redis incr key1 3 redis incr key1 4 will redirect and actually make an incrby call redis incr key1 10 14 redis incrby key1 10 24 incrbyfloat description increment the key with floating point precision parameters key value float value that will be added to the key return value float the new value examples redis incrbyfloat key1 1 5 key1 didnt exist so it will now be 1 5 redis incrbyfloat key1 1 5 3 redis incrbyfloat key1 1 5 1 5 redis incrbyfloat key1 2 5 4 decr decrby description decrement the number stored at key by one if the second argument is filled it will be used as the integer value of the decrement parameters key value value that will be subtracted to key only for decrby return value int the new value examples redis decr key1 key1 didnt exists set to 0 before the increment and now has the value 1 redis decr key1 2 redis decr key1 3 will redirect and actually make an decrby call redis decr key1 10 13 redis decrby key1 10 23 mget getmultiple description get the values of all the specified keys if one or more keys dont exist the array will contain false at the position of the key parameters array array containing the list of the keys return value array array containing the values related to keys in argument examples redis set key1 value1 redis set key2 value2 redis set key3 value3 redis mget array key1 key2 key3 array value1 value2 value3 redis mget array key0 key1 key5 array false value1 false getset description sets a value and returns the previous entry at that key parameters key key string value return value a string the previous value located at this key example redis set x 42 exvalue redis getset x lol return 42 replaces x by lol newvalue redis get x return lol randomkey description returns a random key parameters none return value string an existing key in redis example key redis randomkey surprise redis get key who knows whats in there move description moves a key to a different database parameters key key the key to move integer dbindex the database number to move the key to return value bool true in case of success false in case of failure example redis select 0 switch to db 0 redis set x 42 write 42 to x redis move x 1 move to db 1 redis select 1 switch to db 1 redis get x will return 42 rename renamekey description renames a key parameters string srckey the key to rename string dstkey the new name for the key return value bool true in case of success false in case of failure example redis set x 42 redis rename x y redis get y → 42 redis get x → false renamenx description same as rename but will not replace a key if the destination already exists this is the same behaviour as setnx expire settimeout pexpire description sets an expiration date a timeout on an item pexpire requires a ttl in milliseconds parameters key key the key that will disappear integer ttl the keys remaining time to live in seconds return value bool true in case of success false in case of failure example redis set x 42 redis settimeout x 3 x will disappear in 3 seconds sleep 5 wait 5 seconds redis get x will return false as x has expired expireat pexpireat description sets an expiration date a timestamp on an item pexpireat requires a timestamp in milliseconds parameters key key the key that will disappear integer unix timestamp the keys date of death in seconds from epoch time return value bool true in case of success false in case of failure example redis set x 42 now time null current timestamp redis expireat x now 3 x will disappear in 3 seconds sleep 5 wait 5 seconds redis get x will return false as x has expired keys getkeys description returns the keys that match a certain pattern parameters string pattern using as a wildcard return value array of string the keys that match a certain pattern example allkeys redis keys all keys will match this keywithuserprefix redis keys user scan description scan the keyspace for keys parameters long reference iterator initialized to null string optional pattern to match long optional count of keys per iteration only a suggestion to redis return value array boolean this function will return an array of keys or false if redis returned zero keys example without enabling redis scan retry default condition it null do scan for some keys arr keys redis scan it redis may return empty results so protect against that if arr keys false foreach arr keys as str key echo here is a key str key\n while it 0 echo no more keys to scan \n with redis scan retry enabled redis setoption redis opt scan redis scan retry it null phpredis will retry the scan command if empty results are returned from the server so no empty results check is required while arr keys redis scan it foreach arr keys as str key echo here is a key str key\n echo no more keys to scan \n object description describes the object pointed to by a key parameters the information to retrieve string and the key string info can be one of the following encoding refcount idletime return value string for encoding long for refcount and idletime false if the key doesnt exist example redis object encoding l → ziplist redis object refcount l → 1 redis object idletime l → 400 in seconds with a precision of 10 seconds type description returns the type of data pointed by a given key parameters key key return value depending on the type of the data pointed by the key this method will return the following value string redis redis string set redis redis set list redis redis list zset redis redis zset hash redis redis hash other redis redis not found example redis type key append description append specified string to the string stored in specified key parameters key value return value integer size of the value after the append example redis set key value1 redis append key value2 12 redis get key value1value2 getrange description return a substring of a larger string note substr also supported but deprecated in redis parameters key start end return value string the substring example redis set key string value redis getrange key 0 5 string redis getrange key 5 1 value setrange description changes a substring of a larger string parameters key offset value return value string the length of the string after it was modified example redis set key hello world redis setrange key 6 redis returns 11 redis get key hello redis strlen description get the length of a string value parameters key return value integer example redis set key value redis strlen key 5 getbit description return a single bit out of a larger string parameters key offset return value long the bit value 0 or 1 example redis set key \x7f this is 0111 1111 redis getbit key 0 0 redis getbit key 1 1 setbit description changes a single bit of a string parameters key offset value bool or int 1 or 0 return value long 0 or 1 the value of the bit before it was set example redis set key ord 42 0x2f 0010 1010 redis setbit key 5 1 returns 0 redis setbit key 7 1 returns 0 redis get key chr 0x2f b 0010 1111 bitop description bitwise operation on multiple keys parameters operation either and or not xor ret key return key key1 key2 return value long the size of the string stored in the destination key bitcount description count bits in a string parameters key return value long the number of bits set to 1 in the value behind the input key sort description sort the elements in a list set or sorted set parameters key key options array key value optional with the following keys and values by some pattern limit array 0 1 get some other pattern or an array of patterns sort asc or desc alpha true store external key return value an array of values or a number corresponding to the number of elements stored if that was used example redis delete s redis sadd s 5 redis sadd s 4 redis sadd s 2 redis sadd s 1 redis sadd s 3 var dump redis sort s 1 2 3 4 5 var dump redis sort s array sort desc 5 4 3 2 1 var dump redis sort s array sort desc store out int 5 ttl pttl description returns the time to live left for a given key in seconds ttl or milliseconds pttl parameters key key return value long the time to live in seconds if the key has no ttl 1 will be returned and 2 if the key doesnt exist example redis ttl key persist description remove the expiration timer from a key parameters key key return value bool true if a timeout was removed false if the key didnt exist or didnt have an expiration timer example redis persist key mset msetnx description sets multiple key value pairs in one atomic command msetnx only returns true if all the keys were set see setnx parameters pairs array key value return value bool true in case of success false in case of failure example redis mset array key0 value0 key1 value1 var dump redis get key0 var dump redis get key1 output string 6 value0 string 6 value1 dump description dump a key out of a redis database the value of which can later be passed into redis using the restore command the data that comes out of dump is a binary representation of the key as redis stores it parameters key string return value the redis encoded value of the key or false if the key doesnt exist examples redis set foo bar val redis dump foo val will be the redis encoded key value restore description restore a key from the result of a dump operation parameters key string the key name ttl integer how long the key should live if zero no expire will be set on the key value string binary the redis encoded key value from dump examples redis set foo bar val redis dump foo redis restore bar 0 val the key bar will now be equal to the key foo migrate description migrates a key to a different redis instance note redis introduced migrating multiple keys in 3 0 6 so you must have at least that version in order to call migrate with an array of keys parameters host string the destination host port integer the tcp port to connect to key s string or array destination db integer the target db timeout integer the maximum amount of time given to this transfer copy boolean optional should we send the copy flag to redis replace boolean optional should we send the replace flag to redis examples redis migrate backup 6379 foo 0 3600 redis migrate backup 6379 foo 0 3600 true true copy and replace redis migrate backup 6379 foo 0 3600 false true just replace flag migrate multiple keys requires redis 3 0 6 redis migrate backup 6379 key1 key2 key3 0 3600 hashes hdel delete one or more hash fields hexists determine if a hash field exists hget get the value of a hash field hgetall get all the fields and values in a hash hincrby increment the integer value of a hash field by the given number hincrbyfloat increment the float value of a hash field by the given amount hkeys get all the fields in a hash hlen get the number of fields in a hash hmget get the values of all the given hash fields hmset set multiple hash fields to multiple values hset set the string value of a hash field hsetnx set the value of a hash field only if the field does not exist hvals get all the values in a hash hscan scan a hash key for members hstrlen get the string length of the value associated with field in the hash hset description adds a value to the hash stored at key parameters key hashkey value return value long 1 if value didnt exist and was added successfully 0 if the value was already present and was replaced false if there was an error example redis delete h redis hset h key1 hello 1 key1 hello in the hash at h redis hget h key1 returns hello redis hset h key1 plop 0 value was replaced redis hget h key1 returns plop hsetnx description adds a value to the hash stored at key only if this field isnt already in the hash return value bool true if the field was set false if it was already present example redis delete h redis hsetnx h key1 hello true key1 hello in the hash at h redis hsetnx h key1 world false key1 hello in the hash at h no change since the field wasnt replaced hget description gets a value from the hash stored at key if the hash table doesnt exist or the key doesnt exist false is returned parameters key hashkey return value string the value if the command executed successfully bool false in case of failure hlen description returns the length of a hash in number of items parameters key return value long the number of items in a hash false if the key doesnt exist or isnt a hash example redis delete h redis hset h key1 hello redis hset h key2 plop redis hlen h returns 2 hdel description removes a value from the hash stored at key if the hash table doesnt exist or the key doesnt exist false is returned parameters key hashkey1 hashkey2 return value long the number of deleted keys 0 if the key doesnt exist false if the key isnt a hash hkeys description returns the keys in a hash as an array of strings parameters key key return value an array of elements the keys of the hash this works like phps array keys example redis delete h redis hset h a x redis hset h b y redis hset h c z redis hset h d t var dump redis hkeys h output array 4 0 string 1 a 1 string 1 b 2 string 1 c 3 string 1 d the order is random and corresponds to redis own internal representation of the set structure hvals description returns the values in a hash as an array of strings parameters key key return value an array of elements the values of the hash this works like phps array values example redis delete h redis hset h a x redis hset h b y redis hset h c z redis hset h d t var dump redis hvals h output array 4 0 string 1 x 1 string 1 y 2 string 1 z 3 string 1 t the order is random and corresponds to redis own internal representation of the set structure hgetall description returns the whole hash as an array of strings indexed by strings parameters key key return value an array of elements the contents of the hash example redis delete h redis hset h a x redis hset h b y redis hset h c z redis hset h d t var dump redis hgetall h output array 4 a string 1 x b string 1 y c string 1 z d string 1 t the order is random and corresponds to redis own internal representation of the set structure hexists description verify if the specified member exists in a key parameters key memberkey return value bool if the member exists in the hash table return true otherwise return false examples redis hset h a x redis hexists h a true redis hexists h nonexistingkey false hincrby description increments the value of a member from a hash by a given amount parameters key member value integer value that will be added to the members value return value long the new value examples redis delete h redis hincrby h x 2 returns 2 h x 2 now redis hincrby h x 1 h x ← 2 1 returns 3 hincrbyfloat description increments the value of a hash member by the provided float value parameters key member value float value that will be added to the members value return value float the new value examples redis delete h redis hincrbyfloat h x 1 5 returns 1 5 h x 1 5 now redis hincrbyfloat h x 1 5 returns 3 0 h x 3 0 now redis hincrbyfloat h x 3 0 returns 0 0 h x 0 0 now hmset description fills in a whole hash non string values are converted to string using the standard string cast null values are stored as empty strings parameters key members key → value array return value bool examples redis delete user 1 redis hmset user 1 array name joe salary 2000 redis hincrby user 1 salary 100 joe earns 100 more now hmget description retrieve the values associated to the specified fields in the hash parameters key memberkeys array return value array an array of elements the values of the specified fields in the hash with the hash keys as array keys examples redis delete h redis hset h field1 value1 redis hset h field2 value2 redis hmget h array field1 field2 returns array field1 value1 field2 value2 hscan description scan a hash value for members with an optional pattern and count parameters key string iterator long reference pattern optional pattern to match against count how many keys to return in a go only a suggestion to redis return value array an array of members that match our pattern examples it null dont ever return an empty array until were done iterating redis setoption redis opt scan redis scan retry while arr keys redis hscan hash it foreach arr keys as str field str value echo str field str value\n print the hash member and value hstrlen description get the string length of the value associated with field in the hash stored at key parameters key string field string return value long the string length of the value associated with field or zero when field is not present in the hash or key does not exist at all lists blpop brpop remove and get the first last element in a list brpoplpush pop a value from a list push it to another list and return it lindex lget get an element from a list by its index linsert insert an element before or after another element in a list llen lsize get the length size of a list lpop remove and get the first element in a list lpush prepend one or multiple values to a list lpushx prepend a value to a list only if the list exists lrange lgetrange get a range of elements from a list lrem lremove remove elements from a list lset set the value of an element in a list by its index ltrim listtrim trim a list to the specified range rpop remove and get the last element in a list rpoplpush remove the last element in a list append it to another list and return it redis 1 1 rpush append one or multiple values to a list rpushx append a value to a list only if the list exists blpop brpop description is a blocking lpop rpop primitive if at least one of the lists contains at least one element the element will be popped from the head of the list and returned to the caller if all the list identified by the keys passed in arguments are empty blpop will block during the specified timeout until an element is pushed to one of those lists this element will be popped parameters array array containing the keys of the lists integer timeout or string key1 string key2 string key3 string keyn integer timeout return value array array listname element example non blocking feature redis lpush key1 a redis delete key2 redis blpop key1 key2 10 array key1 a or redis blpop array key1 key2 10 array key1 a redis brpop key1 key2 10 array key1 a or redis brpop array key1 key2 10 array key1 a blocking feature process 1 redis delete key1 redis blpop key1 10 blocking for 10 seconds process 2 redis lpush key1 a process 1 array key1 a is returned brpoplpush description a blocking version of rpoplpush with an integral timeout in the third parameter parameters key srckey key dstkey long timeout return value string the element that was moved in case of success false in case of timeout lindex lget description return the specified element of the list stored at the specified key 0 the first element 1 the second 1 the last element 2 the penultimate return false in case of a bad index or a key that doesnt point to a list parameters key index return value string the element at this index bool false if the key identifies a non string data type or no value corresponds to this index in the list key example redis rpush key1 a redis rpush key1 b redis rpush key1 c key1 a b c redis lget key1 0 a redis lget key1 1 c redis lget key1 10 false linsert description insert value in the list before or after the pivot value the parameter options specify the position of the insert before or after if the list didnt exists or the pivot didnt exists the value is not inserted parameters key position redis before redis after pivot value return value the number of the elements in the list 1 if the pivot didnt exists example redis delete key1 redis linsert key1 redis after a x 0 redis lpush key1 a redis lpush key1 b redis lpush key1 c redis linsert key1 redis before c x 4 redis lrange key1 0 1 array a b x c redis linsert key1 redis after c y 5 redis lrange key1 0 1 array a b x c y redis linsert key1 redis after w value 1 lpop description return and remove the first element of the list parameters key return value string if command executed successfully bool false in case of failure empty list example redis rpush key1 a redis rpush key1 b redis rpush key1 c key1 a b c redis lpop key1 key1 b c lpush description adds the string value to the head left of the list creates the list if the key didnt exist if the key exists and is not a list false is returned parameters key value string value to push in key return value long the new length of the list in case of success false in case of failure examples redis delete key1 redis lpush key1 c returns 1 redis lpush key1 b returns 2 redis lpush key1 a returns 3 key1 now points to the following list a b c lpushx description adds the string value to the head left of the list if the list exists parameters key value string value to push in key return value long the new length of the list in case of success false in case of failure examples redis delete key1 redis lpushx key1 a returns 0 redis lpush key1 a returns 1 redis lpushx key1 b returns 2 redis lpushx key1 c returns 3 key1 now points to the following list a b c lrange lgetrange description returns the specified elements of the list stored at the specified key in the range start end start and stop are interpreted as indices 0 the first element 1 the second 1 the last element 2 the penultimate parameters key start end return value array containing the values in specified range example redis rpush key1 a redis rpush key1 b redis rpush key1 c redis lrange key1 0 1 array a b c lrem lremove description removes the first count occurrences of the value element from the list if count is zero all the matching elements are removed if count is negative elements are removed from tail to head note the argument order is not the same as in the redis documentation this difference is kept for compatibility reasons parameters key value count return value long the number of elements to remove bool false if the value identified by key is not a list example redis lpush key1 a redis lpush key1 b redis lpush key1 c redis lpush key1 a redis lpush key1 a redis lrange key1 0 1 array a a c b a redis lrem key1 a 2 2 redis lrange key1 0 1 array c b a lset description set the list at index with the new value parameters key index value return value bool true if the new value was set false if the index is out of range or data type identified by key is not a list example redis rpush key1 a redis rpush key1 b redis rpush key1 c key1 a b c redis lget key1 0 a redis lset key1 0 x redis lget key1 0 x ltrim listtrim description trims an existing list so that it will contain only a specified range of elements parameters key start stop return value array bool return false if the key identify a non list value example redis rpush key1 a redis rpush key1 b redis rpush key1 c redis lrange key1 0 1 array a b c redis ltrim key1 0 1 redis lrange key1 0 1 array a b rpop description returns and removes the last element of the list parameters key return value string if command executed successfully bool false in case of failure empty list example redis rpush key1 a redis rpush key1 b redis rpush key1 c key1 a b c redis rpop key1 key1 a b rpoplpush description pops a value from the tail of a list and pushes it to the front of another list also return this value redis 1 1 parameters key srckey key dstkey return value string the element that was moved in case of success false in case of failure example redis delete x y redis lpush x abc redis lpush x def redis lpush y 123 redis lpush y 456 move the last of x to the front of y var dump redis rpoplpush x y var dump redis lrange x 0 1 var dump redis lrange y 0 1 output string 3 abc array 1 0 string 3 def array 3 0 string 3 abc 1 string 3 456 2 string 3 123 rpush description adds the string value to the tail right of the list creates the list if the key didnt exist if the key exists and is not a list false is returned parameters key value string value to push in key return value long the new length of the list in case of success false in case of failure examples redis delete key1 redis rpush key1 a returns 1 redis rpush key1 b returns 2 redis rpush key1 c returns 3 key1 now points to the following list a b c rpushx description adds the string value to the tail right of the list if the ist exists false in case of failure parameters key value string value to push in key return value long the new length of the list in case of success false in case of failure examples redis delete key1 redis rpushx key1 a returns 0 redis rpush key1 a returns 1 redis rpushx key1 b returns 2 redis rpushx key1 c returns 3 key1 now points to the following list a b c llen lsize description returns the size of a list identified by key if the list didnt exist or is empty the command returns 0 if the data type identified by key is not a list the command return false parameters key return value long the size of the list identified by key exists bool false if the data type identified by key is not list example redis rpush key1 a redis rpush key1 b redis rpush key1 c key1 a b c redis lsize key1 3 redis rpop key1 redis lsize key1 2 sets sadd add one or more members to a set scard ssize get the number of members in a set sdiff subtract multiple sets sdiffstore subtract multiple sets and store the resulting set in a key sinter intersect multiple sets sinterstore intersect multiple sets and store the resulting set in a key sismember scontains determine if a given value is a member of a set smembers sgetmembers get all the members in a set smove move a member from one set to another spop remove and return one or more members of a set at random srandmember get one or multiple random members from a set srem sremove remove one or more members from a set sunion add multiple sets sunionstore add multiple sets and store the resulting set in a key sscan scan a set for members sadd description adds a value to the set value stored at key if this value is already in the set false is returned parameters key value return value long the number of elements added to the set example redis sadd key1 member1 1 key1 member1 redis sadd key1 member2 member3 2 key1 member1 member2 member3 redis sadd key1 member2 0 key1 member1 member2 member3 scard ssize description returns the cardinality of the set identified by key parameters key return value long the cardinality of the set identified by key 0 if the set doesnt exist example redis sadd key1 member1 redis sadd key1 member2 redis sadd key1 member3 key1 member1 member2 member3 redis scard key1 3 redis scard keyx 0 sdiff description performs the difference between n sets and returns it parameters keys key1 key2 keyn any number of keys corresponding to sets in redis return value array of strings the difference of the first set will all the others example redis delete s0 s1 s2 redis sadd s0 1 redis sadd s0 2 redis sadd s0 3 redis sadd s0 4 redis sadd s1 1 redis sadd s2 3 var dump redis sdiff s0 s1 s2 return value all elements of s0 that are neither in s1 nor in s2 array 2 0 string 1 4 1 string 1 2 sdiffstore description performs the same action as sdiff but stores the result in the first key parameters key dstkey the key to store the diff into keys key1 key2 keyn any number of keys corresponding to sets in redis return value integer the cardinality of the resulting set or false in case of a missing key example redis delete s0 s1 s2 redis sadd s0 1 redis sadd s0 2 redis sadd s0 3 redis sadd s0 4 redis sadd s1 1 redis sadd s2 3 var dump redis sdiffstore dst s0 s1 s2 var dump redis smembers dst return value the number of elements of s0 that are neither in s1 nor in s2 int 2 array 2 0 string 1 4 1 string 1 2 sinter description returns the members of a set resulting from the intersection of all the sets held at the specified keys if just a single key is specified then this command produces the members of this set if one of the keys is missing false is returned parameters key1 key2 keyn keys identifying the different sets on which we will apply the intersection return value array contain the result of the intersection between those keys if the intersection between the different sets is empty the return value will be empty array examples redis sadd key1 val1 redis sadd key1 val2 redis sadd key1 val3 redis sadd key1 val4 redis sadd key2 val3 redis sadd key2 val4 redis sadd key3 val3 redis sadd key3 val4 var dump redis sinter key1 key2 key3 output array 2 0 string 4 val4 1 string 4 val3 sinterstore description performs a sinter command and stores the result in a new set parameters key dstkey the key to store the diff into keys key1 key2 keyn key1 keyn are intersected as in sinter return value integer the cardinality of the resulting set or false in case of a missing key example redis sadd key1 val1 redis sadd key1 val2 redis sadd key1 val3 redis sadd key1 val4 redis sadd key2 val3 redis sadd key2 val4 redis sadd key3 val3 redis sadd key3 val4 var dump redis sinterstore output key1 key2 key3 var dump redis smembers output output int 2 array 2 0 string 4 val4 1 string 4 val3 sismember scontains description checks if value is a member of the set stored at the key key parameters key value return value bool true if value is a member of the set at key key false otherwise example redis sadd key1 member1 redis sadd key1 member2 redis sadd key1 member3 key1 member1 member2 member3 redis sismember key1 member1 true redis sismember key1 memberx false smembers sgetmembers description returns the contents of a set parameters key key return value an array of elements the contents of the set example redis delete s redis sadd s a redis sadd s b redis sadd s a redis sadd s c var dump redis smembers s output array 3 0 string 1 c 1 string 1 a 2 string 1 b the order is random and corresponds to redis own internal representation of the set structure smove description moves the specified member from the set at srckey to the set at dstkey parameters srckey dstkey member return value bool if the operation is successful return true if the srckey and or dstkey didnt exist and or the member didnt exist in srckey false is returned example redis sadd key1 member11 redis sadd key1 member12 redis sadd key1 member13 key1 member11 member12 member13 redis sadd key2 member21 redis sadd key2 member22 key2 member21 member22 redis smove key1 key2 member13 key1 member11 member12 key2 member21 member22 member13 spop description removes and returns a random element from the set value at key parameters key count integer optional return value without count argument string popped value bool false if set identified by key is empty or doesnt exist return value with count argument array member s returned or an empty array if the set doesnt exist bool false on error if the key is not a set example redis sadd key1 member1 redis sadd key1 member2 redis sadd key1 member3 key1 member3 member1 member2 redis spop key1 member1 key1 member3 member2 redis spop key1 member3 key1 member2 with count redis sadd key2 member1 member2 member3 redis spop key2 3 will return all members but in no particular order srandmember description returns a random element from the set value at key without removing it parameters key count integer optional return value if no count is provided a random string value from the set will be returned if a count is provided an array of values from the set will be returned read about the different ways to use the count here srandmember bool false if set identified by key is empty or doesnt exist example redis sadd key1 member1 redis sadd key1 member2 redis sadd key1 member3 key1 member3 member1 member2 no count redis srandmember key1 member1 key1 member3 member1 member2 redis srandmember key1 member3 key1 member3 member1 member2 with a count redis srandmember key1 3 will return an array with all members from the set redis srandmember key1 2 will an array with 2 members of the set redis srandmember key1 100 will return an array of 100 elements picked from our set with dups redis srandmember empty set 100 will return an empty array redis srandmember not a set 100 will return false srem sremove description removes the specified member from the set value stored at key parameters key member return value long the number of elements removed from the set example redis sadd key1 member1 redis sadd key1 member2 redis sadd key1 member3 key1 member1 member2 member3 redis srem key1 member2 member3 return 2 key1 member1 sunion description performs the union between n sets and returns it parameters keys key1 key2 keyn any number of keys corresponding to sets in redis return value array of strings the union of all these sets example redis delete s0 s1 s2 redis sadd s0 1 redis sadd s0 2 redis sadd s1 3 redis sadd s1 1 redis sadd s2 3 redis sadd s2 4 var dump redis sunion s0 s1 s2 return value all elements that are either in s0 or in s1 or in s2 array 4 0 string 1 3 1 string 1 4 2 string 1 1 3 string 1 2 sunionstore description performs the same action as sunion but stores the result in the first key parameters key dstkey the key to store the diff into keys key1 key2 keyn any number of keys corresponding to sets in redis return value integer the cardinality of the resulting set or false in case of a missing key example redis delete s0 s1 s2 redis sadd s0 1 redis sadd s0 2 redis sadd s1 3 redis sadd s1 1 redis sadd s2 3 redis sadd s2 4 var dump redis sunionstore dst s0 s1 s2 var dump redis smembers dst return value the number of elements that are either in s0 or in s1 or in s2 int 4 array 4 0 string 1 3 1 string 1 4 2 string 1 1 3 string 1 2 sscan description scan a set for members parameters key the set to search iterator long reference to the iterator as we go pattern string optional pattern to match against count how many members to return at a time redis might return a different amount return value array boolean phpredis will return an array of keys or false when were done iterating example it null redis setoption redis opt scan redis scan retry dont return empty results until were done while arr mems redis sscan set it pattern foreach arr mems as str mem echo member str mem\n it null redis setoption redis opt scan redis scan noretry return after each iteration even if empty while arr mems redis sscan set it pattern false if count arr mems 0 foreach arr mems as str mem echo member found str mem\n else echo no members in this iteration iterator value it\n sorted sets zadd add one or more members to a sorted set or update its score if it already exists zcard zsize get the number of members in a sorted set zcount count the members in a sorted set with scores within the given values zincrby increment the score of a member in a sorted set zinter intersect multiple sorted sets and store the resulting sorted set in a new key zrange return a range of members in a sorted set by index zrangebyscore zrevrangebyscore return a range of members in a sorted set by score zrangebylex return a lexicographical range from members that share the same score zrank zrevrank determine the index of a member in a sorted set zrem zdelete remove one or more members from a sorted set zremrangebyrank zdeleterangebyrank remove all members in a sorted set within the given indexes zremrangebyscore zdeleterangebyscore remove all members in a sorted set within the given scores zrevrange return a range of members in a sorted set by index with scores ordered from high to low zscore get the score associated with the given member in a sorted set zunion add multiple sorted sets and store the resulting sorted set in a new key zscan scan a sorted set for members zadd description add one or more members to a sorted set or update its score if it already exists parameters key score double value string return value long 1 if the element is added 0 otherwise example redis zadd key 1 val1 redis zadd key 0 val0 redis zadd key 5 val5 redis zrange key 0 1 array val0 val1 val5 zcard zsize description returns the cardinality of an ordered set parameters key return value long the sets cardinality example redis zadd key 0 val0 redis zadd key 2 val2 redis zadd key 10 val10 redis zsize key 3 zcount description returns the number of elements of the sorted set stored at the specified key which have scores in the range start end adding a parenthesis before start or end excludes it from the range inf and inf are also valid limits parameters key start string end string return value long the size of a corresponding zrangebyscore example redis zadd key 0 val0 redis zadd key 2 val2 redis zadd key 10 val10 redis zcount key 0 3 2 corresponding to array val0 val2 zincrby description increments the score of a member from a sorted set by a given amount parameters key value double value that will be added to the members score member return value double the new value examples redis delete key redis zincrby key 2 5 member1 key or member1 didnt exist so member1s score is to 0 before the increment and now has the value 2 5 redis zincrby key 1 member1 3 5 zinter description creates an intersection of sorted sets given in second argument the result of the union will be stored in the sorted set defined by the first argument the third optional argument defines weights to apply to the sorted sets in input in this case the weights will be multiplied by the score of each element in the sorted set before applying the aggregation the forth argument defines the aggregate option which specify how the results of the union are aggregated parameters keyoutput arrayzsetkeys arrayweights aggregatefunction either sum min or max defines the behaviour to use on duplicate entries during the zinter return value long the number of values in the new sorted set example redis delete k1 redis delete k2 redis delete k3 redis delete ko1 redis delete ko2 redis delete ko3 redis delete ko4 redis zadd k1 0 val0 redis zadd k1 1 val1 redis zadd k1 3 val3 redis zadd k2 2 val1 redis zadd k2 3 val3 redis zinter ko1 array k1 k2 2 ko1 array val1 val3 redis zinter ko2 array k1 k2 array 1 1 2 ko2 array val1 val3 weighted zinter redis zinter ko3 array k1 k2 array 1 5 min 2 ko3 array val1 val3 redis zinter ko4 array k1 k2 array 1 5 max 2 ko4 array val3 val1 zrange description returns a range of elements from the ordered set stored at the specified key with values in the range start end start and stop are interpreted as zero based indices 0 the first element 1 the second 1 the last element 2 the penultimate parameters key start long end long withscores bool false return value array containing the values in specified range example redis zadd key1 0 val0 redis zadd key1 2 val2 redis zadd key1 10 val10 redis zrange key1 0 1 array val0 val2 val10 with scores redis zrange key1 0 1 true array val0 0 val2 2 val10 10 zrangebyscore zrevrangebyscore description returns the elements of the sorted set stored at the specified key which have scores in the range start end adding a parenthesis before start or end excludes it from the range inf and inf are also valid limits zrevrangebyscore returns the same items in reverse order when the start and end parameters are swapped parameters key start string end string options array two options are available withscores true and limit array offset count return value array containing the values in specified range example redis zadd key 0 val0 redis zadd key 2 val2 redis zadd key 10 val10 redis zrangebyscore key 0 3 array val0 val2 redis zrangebyscore key 0 3 array withscores true array val0 0 val2 2 redis zrangebyscore key 0 3 array limit array 1 1 array val2 redis zrangebyscore key 0 3 array withscores true limit array 1 1 array val2 2 zrangebylex description returns a lexicographical range of members in a sorted set assuming the members have the same score the min and max values are required to start with exclusive inclusive or be exactly the values negative inf or positive inf the command must be called with either three or five arguments or will return false parameters key the zset you wish to run against min the minimum alphanumeric value you wish to get max the maximum alphanumeric value you wish to get offset optional argument if you wish to start somewhere other than the first element limit optional argument if you wish to limit the number of elements returned return value array containing the values in the specified range example foreach array a b c d e f g as c redis zadd key 0 c redis zrangebylex key c array a b c redis zrangebylex key c array a b redis zrangebylex key c 1 2 array b c zrank zrevrank description returns the rank of a given member in the specified sorted set starting at 0 for the item with the smallest score zrevrank starts at 0 for the item with the largest score parameters key member return value long the items score example redis delete z redis zadd key 1 one redis zadd key 2 two redis zrank key one 0 redis zrank key two 1 redis zrevrank key one 1 redis zrevrank key two 0 zrem zdelete description deletes a specified member from the ordered set parameters key member return value long 1 on success 0 on failure example redis zadd key 0 val0 redis zadd key 2 val2 redis zadd key 10 val10 redis zdelete key val2 redis zrange key 0 1 array val0 val10 zremrangebyrank zdeleterangebyrank description deletes the elements of the sorted set stored at the specified key which have rank in the range start end parameters key start long end long return value long the number of values deleted from the sorted set example redis zadd key 1 one redis zadd key 2 two redis zadd key 3 three redis zremrangebyrank key 0 1 2 redis zrange key 0 1 array withscores true array three 3 zremrangebyscore zdeleterangebyscore description deletes the elements of the sorted set stored at the specified key which have scores in the range start end parameters key start double or inf or inf string end double or inf or inf string return value long the number of values deleted from the sorted set example redis zadd key 0 val0 redis zadd key 2 val2 redis zadd key 10 val10 redis zremrangebyscore key 0 3 2 zrevrange description returns the elements of the sorted set stored at the specified key in the range start end in reverse order start and stop are interpreted as zero based indices 0 the first element 1 the second 1 the last element 2 the penultimate parameters key start long end long withscores bool false return value array containing the values in specified range example redis zadd key 0 val0 redis zadd key 2 val2 redis zadd key 10 val10 redis zrevrange key 0 1 array val10 val2 val0 with scores redis zrevrange key 0 1 true array val10 10 val2 2 val0 0 zscore description returns the score of a given member in the specified sorted set parameters key member return value double example redis zadd key 2 5 val2 redis zscore key val2 2 5 zunion description creates an union of sorted sets given in second argument the result of the union will be stored in the sorted set defined by the first argument the third optional argument defines weights to apply to the sorted sets in input in this case the weights will be multiplied by the score of each element in the sorted set before applying the aggregation the forth argument defines the aggregate option which specify how the results of the union are aggregated parameters keyoutput arrayzsetkeys arrayweights aggregatefunction either sum min or max defines the behaviour to use on duplicate entries during the zunion return value long the number of values in the new sorted set example redis delete k1 redis delete k2 redis delete k3 redis delete ko1 redis delete ko2 redis delete ko3 redis zadd k1 0 val0 redis zadd k1 1 val1 redis zadd k2 2 val2 redis zadd k2 3 val3 redis zunion ko1 array k1 k2 4 ko1 array val0 val1 val2 val3 weighted zunion redis zunion ko2 array k1 k2 array 1 1 4 ko2 array val0 val1 val2 val3 redis zunion ko3 array k1 k2 array 5 1 4 ko3 array val0 val2 val3 val1 zscan description scan a sorted set for members with optional pattern and count parameters key string the set to scan iterator long reference initialized to null pattern string optional the pattern to match count how many keys to return per iteration redis might return a different number return value array boolean phpredis will return matching keys from redis or false when iteration is complete example it null redis setoption redis opt scan redis scan retry while arr matches redis zscan zset it pattern foreach arr matches as str mem f score echo key str mem score f score\n geocoding geoadd prototype redis geoadd key longitude latitude member longitude latitude member description add one or more geospatial items to the specified key this function must be called with at least one longitude latitude member triplet return value integer the number of elements added to the geospatial key example redis del myplaces since the key will be new result will be 2 result redis geoadd myplaces 37 773 122 431 san francisco 157 858 21 315 honolulu geohash prototype redis geohash key member member member description retrieve geohash strings for one or more elements of a geospatial index return value array one or more redis geohash encoded strings example redis geoadd hawaii 157 858 21 306 honolulu 156 331 20 798 maui hashes redis geohash hawaii honolulu maui var dump hashes output array 2 0 string 11 87z9pyek3y0 1 string 11 8e8y6d5jps0 geopos prototype redis geopos key member member member description return longitude latitude positions for each requested member return value array one or more longitude latitude positions example redis geoadd hawaii 157 858 21 306 honolulu 156 331 20 798 maui positions redis geopos hawaii honolulu maui var dump positions output array 2 0 array 2 0 string 22 157 85800248384475708 1 string 19 21 3060004581273077 1 array 2 0 string 22 156 33099943399429321 1 string 20 20 79799924753607598 geodist prototype redis geodist key member1 member2 unit description return the distance between two members in a geospatial set if units are passed it must be one of the following values m meters km kilometers mi miles ft feet return value double the distance between the two passed members in the units requested meters by default example redis geoadd hawaii 157 858 21 306 honolulu 156 331 20 798 maui meters redis geodist hawaii honolulu maui kilometers redis geodist hawaii honolulu maui km miles redis geodist hawaii honolulu maui mi feet redis geodist hawaii honolulu maui ft echo distance between honolulu and maui \n echo meters meters\n echo kilometers kilometers\n echo miles miles\n echo feet feet\n bad unit inches redis geodist hawaii honolulu maui in echo invalid unit returned \n var dump inches output distance between honolulu and maui meters 168275 204 kilometers 168 2752 miles 104 5616 feet 552084 0028 invalid unit returned bool false georadius prototype redis georadius key longitude latitude radius unit array options description return members of a set with geospatial information that are within the radius specified by the caller options array the georadius command can be called with various options that control how redis returns results the following table describes the options phpredis supports all options are case insensitive key value description count integer 0 limit how many results are returned withcoord return longitude and latitude of matching members withdist return the distance from the center withhash return the raw geohash encoded score asc sort results in ascending order desc sort results in descending order note it doesnt make sense to pass both asc and desc options but if both are passed the last one passed will be used note phpredis does not currently support the store or storedist options but will be added to future versions return value array zero or more entries that are within the provided radius example add some cities redis geoadd hawaii 157 858 21 306 honolulu 156 331 20 798 maui echo within 300 miles of honolulu \n var dump redis georadius hawaii 157 858 21 306 300 mi echo \nwithin 300 miles of honolulu with distances \n options withdist var dump redis georadius hawaii 157 858 21 306 300 mi options echo \nfirst result within 300 miles of honolulu with distances \n options count 1 var dump redis georadius hawaii 157 858 21 306 300 mi options echo \nfirst result within 300 miles of honolulu with distances in descending sort order \n options desc var dump redis georadius hawaii 157 858 21 306 300 mi options output within 300 miles of honolulu array 2 0 string 8 honolulu 1 string 4 maui within 300 miles of honolulu with distances array 2 0 array 2 0 string 8 honolulu 1 string 6 0 0002 1 array 2 0 string 4 maui 1 string 8 104 5615 first result within 300 miles of honolulu with distances array 1 0 array 2 0 string 8 honolulu 1 string 6 0 0002 first result within 300 miles of honolulu with distances in descending sort order array 1 0 array 2 0 string 4 maui 1 string 8 104 5615 georadiusbymember prototype redis georadiusbymember key member radius units array options description this method is identical to georadius except that instead of passing a longitude and latitude as the source you pass an existing member in the geospatial set options array see georadius command for options array return value array the zero or more entries that are close enough to the member given the distance and radius specified example redis geoadd hawaii 157 858 21 306 honolulu 156 331 20 798 maui echo within 300 miles of honolulu \n var dump redis georadiusbymember hawaii honolulu 300 mi echo \nfirst match within 300 miles of honolulu \n var dump redis georadiusbymember hawaii honolulu 300 mi array count 1 output within 300 miles of honolulu array 2 0 string 8 honolulu 1 string 4 maui first match within 300 miles of honolulu array 1 0 string 8 honolulu pub sub psubscribe subscribe to channels by pattern publish post a message to a channel subscribe subscribe to channels pubsub introspection into the pub sub subsystem psubscribe description subscribe to channels by pattern parameters patterns an array of patterns to match callback either a string or an array with an object and method the callback will get four arguments redis pattern channel message return value mixed any non null return value in the callback will be returned to the caller example function psubscribe redis pattern chan msg echo pattern pattern\n echo channel chan\n echo payload msg\n publish description publish messages to channels warning this function will probably change in the future parameters channel a channel to publish to message string example redis publish chan 1 hello world send message subscribe description subscribe to channels warning this function will probably change in the future parameters channels an array of channels to subscribe to callback either a string or an array instance method name the callback function receives 3 parameters the redis instance the channel name and the message return value mixed any non null return value in the callback will be returned to the caller example function f redis chan msg switch chan case chan 1 break case chan 2 break case chan 2 break redis subscribe array chan 1 chan 2 chan 3 f subscribe to 3 chans pubsub description a command allowing you to get information on the redis pub sub system parameters keyword string which can be channels numsub or numpat argument optional variant for the channels subcommand you can pass a string pattern for numsub an array of channel names return value channels returns an array where the members are the matching channels numsub returns a key value array where the keys are channel names and values are their counts numpat integer return containing the number active pattern subscriptions example redis pubsub channels all channels redis pubsub channels pattern just channels matching your pattern redis pubsub numsub array chan1 chan2 get subscriber counts for chan1 and chan2 redis pubsub numpat get the number of pattern subscribers generic rawcommand execute any generic command against the server rawcommand description a method to execute any arbitrary command against the a redis server parameters this method is variadic and takes a dynamic number of arguments of various types string long double but must be passed at least one argument the command keyword itself return value the return value can be various types depending on what the server itself returns no post processing is done to the returned value and must be handled by the client code example php returns true redis rawcommand set foo bar returns bar redis rawcommand get foo returns 3 redis rawcommand rpush mylist one 2 3 5 returns one 2 3 5000000000000000 redis rawcommand lrange mylist 0 1 transactions multi exec discard enter and exit transactional mode watch unwatch watches a key for modifications by another client multi exec discard description enter and exit transactional mode parameters optional redis multi or redis pipeline defaults to redis multi a redis multi block of commands runs as a single transaction a redis pipeline block is simply transmitted faster to the server but without any guarantee of atomicity discard cancels a transaction return value multi returns the redis instance and enters multi mode once in multi mode all subsequent method calls return the same object until exec is called example ret redis multi set key1 val1 get key1 set key2 val2 get key2 exec ret array 0 true 1 val1 2 true 3 val2 watch unwatch description watches a key for modifications by another client if the key is modified between watch and exec the multi exec transaction will fail return false unwatch cancels all the watching of all keys by this client parameters keys string for one key or array for a list of keys example redis watch x or for a list of keys redis watch array x another key long code here during the execution of which other clients could well modify x ret redis multi incr x exec ret false if x has been modified between the call to watch and the call to exec scripting eval evaluate a lua script serverside evalsha evaluate a lua script serverside from the sha1 hash of the script instead of the script itself script execute the redis script command to perform various operations on the scripting subsystem getlasterror the last error message if any clearlasterror clear the last error message prefix a utility method to prefix the value with the prefix setting for phpredis unserialize a utility method to unserialize data with whatever serializer is set up serialize a utility method to serialize data with whatever serializer is set up eval description evaluate a lua script serverside parameters script string args array optional num keys int optional return value mixed what is returned depends on what the lua script itself returns which could be a scalar value int string or an array arrays that are returned can also contain other arrays if thats how it was set up in your lua script if there is an error executing the lua script the getlasterror function can tell you the message that came back from redis e g compile error examples redis eval return 1 returns an integer 1 redis eval return 1 2 3 returns array 1 2 3 redis del mylist redis rpush mylist a redis rpush mylist b redis rpush mylist c nested response array 1 2 3 array a b c redis eval return 1 2 3 redis call lrange mylist 0 1 evalsha description evaluate a lua script serverside from the sha1 hash of the script instead of the script itself in order to run this command redis will have to have already loaded the script either by running it or via the script load command parameters script sha string the sha1 encoded hash of the script you want to run args array optional arguments to pass to the lua script num keys int optional the number of arguments that should go into the keys array vs the argv array when redis spins the script return value mixed see eval examples script return 1 sha redis script load script redis evalsha sha returns 1 script description execute the redis script command to perform various operations on the scripting subsystem usage redis script load script redis script flush redis script kill redis script exists script1 script2 script3 return value script load will return the sha1 hash of the passed script on success and false on failure script flush should always return true script kill will return true if a script was able to be killed and false if not script exists will return an array with true or false for each passed script client description issue the client command with various arguments the redis client command can be used in four ways client list client getname client setname name client kill ip port usage redis client list get a list of clients redis client getname get the name of the current connection redis client setname somename set the name of the current connection redis client kill kill the process at ip port return value this will vary depending on which client command was executed client list will return an array of arrays with client information client getname will return the client name or false if none has been set client setname will return true if it can be set and false if not client kill will return true if the client can be killed and false if not note phpredis will attempt to reconnect so you can actually kill your own connection but may not notice losing it getlasterror description the last error message if any parameters none return value a string with the last returned script based error message or null if there is no error examples redis eval this is not lua err redis getlasterror err error compiling script new function user script 1 expected near clearlasterror description clear the last error message parameters none return value bool true examples redis set x a redis incr x err redis getlasterror err value is not an integer or out of range redis clearlasterror err redis getlasterror null prefix description a utility method to prefix the value with the prefix setting for phpredis parameters value string the value you wish to prefix return value if a prefix is set up the value now prefixed if there is no prefix the value will be returned unchanged examples redis setoption redis opt prefix my prefix redis prefix my value will return my prefix my value serialize description a utility method to serialize values manually this method allows you to serialize a value with whatever serializer is configured manually this can be useful for serialization unserialization of data going in and out of eval commands as phpredis cant automatically do this itself note that if no serializer is set phpredis will change array values to array and objects to object parameters value mixed the value to be serialized examples redis setoption redis opt serializer redis serializer none redis serialize foo returns foo redis serialize array returns array redis serialize new stdclass returns object redis setoption redis opt serializer redis serializer php redis serialize foo returns s 3 foo unserialize description a utility method to unserialize data with whatever serializer is set up if there is no serializer set the value will be returned unchanged if there is a serializer set up and the data passed in is malformed an exception will be thrown this can be useful if phpredis is serializing values and you return something from redis in a lua script that is serialized parameters value string the value to be unserialized examples redis setoption redis opt serializer redis serializer php redis unserialize a 3 i 0 i 1 i 1 i 2 i 2 i 3 will return array 1 2 3 introspection isconnected description a method to determine if a phpredis object thinks its connected to a server parameters none return value boolean returns true if phpredis thinks its connected and false if not gethost description retrieve our host or unix socket that were connected to parameters none return value mixed the host or unix socket were connected to or false if were not connected getport description get the port were connected to parameters none return value mixed returns the port were connected to or false if were not connected getdbnum description get the database number phpredis is pointed to parameters none return value mixed returns the database number long phpredis thinks its pointing to or false if were not connected gettimeout description get the write timeout in use for phpredis parameters none return value mixed the timeout double specified in our connect call or false if were not connected getreadtimeout description get the read timeout specified to phpredis or false if were not connected parameters none return value mixed returns the read timeout which can be set using setoption and redis opt read timeout or false if were not connected getpersistentid description gets the persistent id that phpredis is using parameters none return value mixed returns the persistent id phpredis is using which will only be set if connected with pconnect null if were not using a persistent id and false if were not connected getauth description get the password used to authenticate the phpredis connection parameters none return value mixed returns the password used to authenticate a phpredis session or null if none was used and false if were not connected