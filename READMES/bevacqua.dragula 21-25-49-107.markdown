drag and drop so simple it hurts browser support includes every sane browser and ie7 granted you polyfill the functional array methods in es5 framework support includes vanilla javascript angular and react official angular bridge for dragula demo official angular 2 bridge for dragula demo official react bridge for dragula demo demo try out the demo inspiration have you ever wanted a drag and drop library that just works that doesnt just depend on bloated frameworks that has great support that actually understands where to place the elements when they are dropped that doesnt need you to do a zillion things to get it to work well so did i features super easy to set up no bloated dependencies figures out sort order on its own a shadow where the item would be dropped offers visual feedback touch events seamlessly handles clicks without any configuration install you can get it on npm shell npm install dragula save or bower too shell bower install dragula save or a cdn shell script src https cdnjs cloudflare com ajax libs dragula version dragula min js script if youre not using either package manager you can use dragula by downloading the files in the dist folder we strongly suggest using npm though including the javascript theres a caveat to dragula you shouldnt include it in the head of your web applications its bad practice to place scripts in the head and as such dragula makes no effort to support this use case place dragula in the body instead including the css theres a few css styles you need to incorporate in order for dragula to work as expected you can add them by including dist dragula css or dist dragula min css in your document if youre using stylus you can include the styles using the directive below styl import node modules dragula dragula usage dragula provides the easiest possible api to make drag and drop a breeze in your applications dragula containers options by default dragula will allow the user to drag an element in any of the containers and drop it in any other container in the list if the element is dropped anywhere thats not one of the containers the event will be gracefully cancelled according to the revertonspill and removeonspill options note that dragging is only triggered on left clicks and only if no meta keys are pressed the example below allows the user to drag elements from left into right and from right into left js dragula document queryselector left document queryselector right you can also provide an options object heres an overview of the default values js dragula containers iscontainer function el return false only elements in drake containers will be taken into account moves function el source handle sibling return true elements are always draggable by default accepts function el target source sibling return true elements can be dropped in any of the containers by default invalid function el handle return false dont prevent any drags from initiating by default direction vertical y axis is considered when determining where an element would be dropped copy false elements are moved by default not copied copysortsource false elements in copy source containers can be reordered revertonspill false spilling will put the element back where it was dragged from if this is true removeonspill false spilling will remove the element if this is true mirrorcontainer document body set the element that gets mirror elements appended ignoreinputtextselection true allows users to select input text see details below you can omit the containers argument and add containers dynamically later on js var drake dragula copy true drake containers push container you can also set the containers from the options object js var drake dragula containers containers and you could also not set any arguments which defaults to a drake without containers and with the default options js var drake dragula the options are detailed below options containers setting this option is effectively the same as passing the containers in the first argument to dragula containers options options iscontainer besides the containers that you pass to dragula or the containers you dynamically push or unshift from drake containers you can also use this method to specify any sort of logic that defines what is a container for this particular drake instance the example below dynamically treats all dom elements with a css class of dragula container as dragula containers for this drake js var drake dragula iscontainer function el return el classlist contains dragula container options moves you can define a moves method which will be invoked with el source handle sibling whenever an element is clicked if this method returns false a drag event wont begin and the event wont be prevented either the handle element will be the original click target which comes in handy to test if that element is an expected drag handle options accepts you can set accepts to a method with the following signature el target source sibling itll be called to make sure that an element el that came from container source can be dropped on container target before a sibling element the sibling can be null which would mean that the element would be placed as the last element in the container note that if options copy is set to true el will be set to the copy instead of the originally dragged element also note that the position where a drag starts is always going to be a valid place where to drop the element even if accepts returned false for all cases options copy if copy is set to true or a method that returns true items will be copied rather than moved this implies the following differences event move copy drag element will be concealed from source nothing happens drop element will be moved into target element will be cloned into target remove element will be removed from dom nothing happens cancel element will stay in source nothing happens if a method is passed itll be called whenever an element starts being dragged in order to decide whether it should follow copy behavior or not consider the following example js copy function el source return el classname you may copy us options copysortsource if copy is set to true or a method that returns true and copysortsource is true as well users will be able to sort elements in copy source containers js copy true copysortsource true options revertonspill by default spilling an element outside of any containers will move the element back to the drop position previewed by the feedback shadow setting revertonspill to true will ensure elements dropped outside of any approved containers are moved back to the source element where the drag event began rather than stay at the drop position previewed by the feedback shadow options removeonspill by default spilling an element outside of any containers will move the element back to the drop position previewed by the feedback shadow setting removeonspill to true will ensure elements dropped outside of any approved containers are removed from the dom note that remove events wont fire if copy is set to true options direction when an element is dropped onto a container itll be placed near the point where the mouse was released if the direction is vertical the default value the y axis will be considered otherwise if the direction is horizontal the x axis will be considered options invalid you can provide an invalid method with a el handle signature this method should return true for elements that shouldnt trigger a drag the handle argument is the element that was clicked while el is the item that would be dragged heres the default implementation which doesnt prevent any drags js function invalidtarget el handle return false note that invalid will be invoked on the dom element that was clicked and every parent up to immediate children of a drake container as an example you could set invalid to return false whenever the clicked element or any of its parents is an anchor tag js invalid function el handle return el tagname a options mirrorcontainer the dom element where the mirror element displayed while dragging will be appended to defaults to document body options ignoreinputtextselection when this option is enabled if the user clicks on an input element the drag wont start until their mouse pointer exits the input this translates into the user being able to select text in inputs contained inside draggable elements and still drag the element by moving their mouse outside of the input so you get the best of both worlds this option is enabled by default turn it off by setting it to false if its disabled your users wont be able to select text in inputs within dragula containers with their mouse api the dragula method returns a tiny object with a concise api well refer to the api returned by dragula as drake drake containers this property contains the collection of containers that was passed to dragula when building this drake instance you can push more containers and splice old containers at will drake dragging this property will be true whenever an element is being dragged drake start item enter drag mode without a shadow this method is most useful when providing complementary keyboard shortcuts to an existing drag and drop solution even though a shadow wont be created at first the user will get one as soon as they click on item and start dragging it around note that if they click and drag something else end will be called before picking up the new item drake end gracefully end the drag event as if using the last position marked by the preview shadow as the drop target the proper cancel or drop event will be fired depending on whether the item was dropped back where it was originally lifted from which is essentially a no op thats treated as a cancel event drake cancel revert if an element managed by drake is currently being dragged this method will gracefully cancel the drag action you can also pass in revert at the method invocation level effectively producing the same result as if revertonspill was true note that a cancellation will result in a cancel event only in the following scenarios revertonspill is true drop target as previewed by the feedback shadow is the source container and the item is dropped in the same position where it was originally dragged from drake remove if an element managed by drake is currently being dragged this method will gracefully remove it from the dom drake on events the drake is an event emitter the following events can be tracked using drake on type listener event name listener arguments event description drag el source el was lifted from source dragend el dragging event for el ended with either cancel remove or drop drop el target source sibling el was dropped into target before a sibling element and originally came from source cancel el container source el was being dragged but it got nowhere and went back into container its last stable parent el originally came from source remove el container source el was being dragged but it got nowhere and it was removed from the dom its last stable parent was container and originally came from source shadow el container source el the visual aid shadow was moved into container may trigger many times as the position of el changes even within the same container el originally came from source over el container source el is over container and originally came from source out el container source el was dragged out of container or dropped and originally came from source cloned clone original type dom element original was cloned as clone of type mirror or copy fired for mirror images and when copy true drake canmove item returns whether the drake instance can accept drags for a dom element item this method returns true when all the conditions outlined below are met and false otherwise item is a child of one of the specified containers for drake item passes the pertinent invalid checks item passes a moves check drake destroy removes all drag and drop events used by dragula to manage drag and drop between the containers if destroy is called while an element is being dragged the drag will be effectively cancelled css dragula uses only four css classes their purpose is quickly explained below but you can check dist dragula css to see the corresponding css rules gu unselectable is added to the mirrorcontainer element when dragging you can use it to style the mirrorcontainer while something is being dragged gu transit is added to the source element when its mirror image is dragged it just adds opacity to it gu mirror is added to the mirror image it handles fixed positioning and z index and removes any prior margins on the element note that the mirror image is appended to the mirrorcontainer not to its initial container keep that in mind when styling your elements with nested rules like list item padding 10px gu hide is a helper class to apply display none to an element contributing see contributing markdown for details support theres now a dedicated support channel in slack visit this page to get an invite support requests wont be handled through the repository anymore license mit