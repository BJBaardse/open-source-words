mbprogresshud mbprogresshud is an ios drop in class that displays a translucent hud with an indicator and or labels while work is being done in a background thread the hud is meant as a replacement for the undocumented private uikit uiprogresshud with some additional features note the class has recently undergone a major rewrite the old version is available in the legacy branch should you need it requirements mbprogresshud works on ios 6 and requires arc to build it depends on the following apple frameworks which should already be included with most xcode templates foundation framework uikit framework coregraphics framework you will need the latest developer tools in order to build mbprogresshud old xcode versions might work but compatibility will not be explicitly maintained adding mbprogresshud to your project cocoapods cocoapods is the recommended way to add mbprogresshud to your project add a pod entry for mbprogresshud to your podfile pod mbprogresshud 1 1 0 install the pod s by running pod install include mbprogresshud wherever you need it with import mbprogresshud h carthage add mbprogresshud to your cartfile e g github jdg mbprogresshud 1 1 0 run carthage update follow the rest of the standard carthage installation instructions to add mbprogresshud to your project source files alternatively you can directly add the mbprogresshud h and mbprogresshud m source files to your project download the latest code version or add the repository as a git submodule to your git tracked project open your project in xcode then drag and drop mbprogresshud h and mbprogresshud m onto your project use the product navigator view make sure to select copy items when asked if you extracted the code archive outside of your project include mbprogresshud wherever you need it with import mbprogresshud h static library you can also add mbprogresshud as a static library to your project or workspace download the latest code version or add the repository as a git submodule to your git tracked project open your project in xcode then drag and drop mbprogresshud xcodeproj onto your project or workspace use the product navigator view select your target and go to the build phases tab in the link binary with libraries section select the add button on the sheet find and add libmbprogresshud a you might also need to add mbprogresshud to the target dependencies list include mbprogresshud wherever you need it with import mbprogresshud mbprogresshud h usage the main guideline you need to follow when dealing with mbprogresshud while running long running tasks is keeping the main thread work free so the ui can be updated promptly the recommended way of using mbprogresshud is therefore to set it up on the main thread and then spinning the task that you want to perform off onto a new thread objective c mbprogresshud showhudaddedto self view animated yes dispatch async dispatch get global queue dispatch queue priority low 0 do something dispatch async dispatch get main queue mbprogresshud hidehudforview self view animated yes you can add the hud on any view or window it is however a good idea to avoid adding the hud to certain uikit views with complex view hierarchies like uitableview or uicollectionview those can mutate their subviews in unexpected ways and thereby break hud display if you need to configure the hud you can do this by using the mbprogresshud reference that showhudaddedto animated returns objective c mbprogresshud hud mbprogresshud showhudaddedto self view animated yes hud mode mbprogresshudmodeannulardeterminate hud label text loading self dosomethinginbackgroundwithprogresscallback float progress hud progress progress completioncallback hud hideanimated yes you can also use a nsprogress object and mbprogresshud will update itself when there is progress reported through that object objective c mbprogresshud hud mbprogresshud showhudaddedto self view animated yes hud mode mbprogresshudmodeannulardeterminate hud label text loading nsprogress progress self dosomethinginbackgroundcompletion hud hideanimated yes hud progressobject progress keep in mind that ui updates inclining calls to mbprogresshud should always be done on the main thread if you need to run your long running task in the main thread you should perform it with a slight delay so uikit will have enough time to update the ui i e draw the hud before you block the main thread with your task objective c mbprogresshud showhudaddedto self view animated yes dispatch time t poptime dispatch time dispatch time now 0 01 nsec per sec dispatch after poptime dispatch get main queue void do something mbprogresshud hidehudforview self view animated yes you should be aware that any hud updates issued inside the above block wont be displayed until the block completes for more examples including how to use mbprogresshud with asynchronous operations such as nsurlconnection take a look at the bundled demo project extensive api documentation is provided in the header file mbprogresshud h license this code is distributed under the terms and conditions of the mit license change log a brief summary of each mbprogresshud release can be found in the changelog