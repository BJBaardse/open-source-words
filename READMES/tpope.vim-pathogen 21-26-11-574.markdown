pathogen vim manage your runtimepath with ease in practical terms pathogen vim makes it super easy to install plugins and runtime files in their own private directories installation install to vim autoload pathogen vim or copy and paste the following into your terminal shell mkdir p vim autoload vim bundle \ curl lsso vim autoload pathogen vim https tpo pe pathogen vim if youre using windows change all occurrences of vim to \vimfiles runtime path manipulation add this to your vimrc execute pathogen infect if youre brand new to vim and lacking a vimrc vim vimrc and paste in the following super minimal example execute pathogen infect syntax on filetype plugin indent on now any plugins you wish to install can be extracted to a subdirectory under vim bundle and they will be added to the runtimepath observe cd vim bundle \ git clone https github com tpope vim sensible git now sensible vim is installed if you really want to get crazy you could set it up as a submodule in whatever repository you keep your dot files in i dont like to get crazy if you dont like the directory name bundle you can pass a runtime relative glob as an argument execute pathogen infect stuff the indicates where the expansion should occur you can also pass an absolute path instead i keep the plugins i maintain under src and this is how i add them execute pathogen infect bundle src vim bundle normally to generate documentation vim expects you to run helptags on each directory with documentation e g helptags vim doc provided with pathogen vim is a helptags command that does this on every directory in your runtimepath if you really want to get crazy you could even invoke helptags in your vimrc i dont like to get crazy finally pathogen vim has a rich api that can manipulate runtimepath and other comma delimited path options in ways most people will never need to do if youre one of those edge cases look at the source its well documented native vim package management vim 8 includes support for package management in a manner similar to pathogen vim if youd like to transition to this native support pathogen vim can help calling pathogen infect on an older version of vim will supplement the bundle default with pack start effectively backporting a subset of the new native functionality runtime file editing vopen vedit vsplit vvsplit vtabedit vpedit and vread have all moved to scriptease vim faq can i put pathogen vim in a submodule like all my other plugins sure stick it under vim bundle and prepend the following to your vimrc runtime bundle vim pathogen autoload pathogen vim or if your bundles are somewhere other than vim say src vim source src vim bundle vim pathogen autoload pathogen vim will you accept these 14 pull requests adding a gitignore for tags so i dont see untracked changes in my dot files repository no but ill teach you how to ignore tags globally git config global core excludesfile cvsignore echo tags cvsignore while any filename will work ive chosen to follow the ancient tradition of cvsignore because utilities like rsync use it too clever huh what about vimballs if you really must use one e name vba mkdir vim bundle name usevimball vim bundle name why dont my plugins load when i use vim sessions vim sessions default to capturing all global options which includes the runtimepath that pathogen vim manipulates this can cause other problems too so i recommend turning that behavior off set sessionoptions options contributing if your commit message sucks im not going to accept your pull request ive explained very politely dozens of times that my general guidelines are absolute rules on my own repositories so i may lack the energy to explain it to you yet another time and please if i ask you to change something git commit amend beyond that dont be shy about asking before patching what takes you hours might take me minutes simply because i have both domain knowledge and a perverse knowledge of vim script so vast that many would consider it a symptom of mental illness on the flip side some ideas ill reject no matter how good the implementation is send a patch is an edge case answer in my book self promotion like pathogen vim follow the repository on github and vote for it on vim org and if youre feeling especially charitable follow tpope on twitter and github license copyright c tim pope distributed under the same terms as vim itself see help license