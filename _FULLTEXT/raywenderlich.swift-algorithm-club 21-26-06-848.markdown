welcome to the swift algorithm club here youll find implementations of popular algorithms and data structures in everyones favorite new language swift with detailed explanations of how they work if youre a computer science student who needs to learn this stuff for exams or if youre a self taught programmer who wants to brush up on the theory behind your craft youve come to the right place the goal of this project is to explain how algorithms work the focus is on clarity and readability of the code not on making a reusable library that you can drop into your own projects that said most of the code should be ready for production use but you may need to tweak it to fit into your own codebase code is compatible with xcode 9 and swift 4 well keep this updated with the latest version of swift heart eyes suggestions and contributions are welcome heart eyes important links what are algorithms and data structures pancakes why learn algorithms worried this isnt your cup of tea then read this big o notation we often say things like this algorithm is o n if you dont know what that means read this first algorithm design techniques how do you create your own algorithms how to contribute report an issue to leave feedback or submit a pull request where to start if youre new to algorithms and data structures here are a few good ones to start out with stack queue insertion sort binary search and binary search tree merge sort boyer moore string search the algorithms searching linear search find an element in an array binary search quickly find elements in a sorted array count occurrences count how often a value appears in an array select minimum maximum find the minimum maximum value in an array k th largest element find the k th largest element in an array such as the median selection sampling randomly choose a bunch of items from a collection union find keeps track of disjoint sets and lets you quickly merge them string search brute force string search a naive method boyer moore a fast method to search for substrings it skips ahead based on a look up table to avoid looking at every character in the text knuth morris pratt a linear time string algorithm that returns indexes of all occurrencies of a given pattern rabin karp faster search by using hashing longest common subsequence find the longest sequence of characters that appear in the same order in both strings z algorithm finds all instances of a pattern in a string and returns the indexes of where the pattern starts within the string sorting its fun to see how sorting algorithms work but in practice youll almost never have to provide your own sorting routines swifts own sort is more than up to the job but if youre curious read on basic sorts insertion sort selection sort shell sort fast sorts quicksort merge sort heap sort hybrid sorts introsort special purpose sorts counting sort radix sort topological sort bad sorting algorithms dont use these bubble sort slow sort compression run length encoding rle store repeated values as a single byte and a count huffman coding store more common elements using a smaller number of bits miscellaneous shuffle randomly rearranges the contents of an array comb sort an improve upon the bubble sort algorithm convex hull miller rabin primality test is the number a prime number minimumcoinchange a showcase for dynamic programming mathematics greatest common divisor gcd special bonus the least common multiple permutations and combinations get your combinatorics on shunting yard algorithm convert infix expressions to postfix karatsuba multiplication another take on elementary multiplication haversine distance calculating the distance between 2 points from a sphere strassens multiplication matrix efficient way to handle matrix multiplication machine learning k means clustering unsupervised classifier that partitions data into k clusters k nearest neighbors linear regression a technique for creating a model of the relationship between two or more variable quantities logistic regression neural networks pagerank naive bayes classifier data structures the choice of data structure for a particular task depends on a few things first there is the shape of your data and the kinds of operations that youll need to perform on it if you want to look up objects by a key you need some kind of dictionary if your data is hierarchical in nature you want a tree structure of some sort if your data is sequential you want a stack or queue second it matters what particular operations youll be performing most as certain data structures are optimized for certain actions for example if you often need to find the most important object in a collection then a heap or priority queue is more optimal than a plain array most of the time using just the built in array dictionary and set types is sufficient but sometimes you may want something more fancy variations on arrays array2d a two dimensional array with fixed dimensions useful for board games bit set a fixed size sequence of n bits fixed size array when you know beforehand how large your data will be it might be more efficient to use an old fashioned array with a fixed size ordered array an array that is always sorted rootish array stack a space and time efficient variation on swift arrays queues stack last in first out queue first in first out deque a double ended queue priority queue a queue where the most important element is always at the front ring buffer also known as a circular buffer an array of a certain size that conceptually wraps around back to the beginning lists linked list a sequence of data items connected through links covers both singly and doubly linked lists skip list skip list is a probabilistic data structure with same logarithmic time bound and efficiency as avl or red black tree and provides a clever compromise to efficiently support search and update operations trees tree a general purpose tree structure binary tree a tree where each node has at most two children binary search tree bst a binary tree that orders its nodes in a way that allows for fast queries red black tree a self balancing binary search tree splay tree a self balancing binary search tree that enables fast retrieval of recently updated elements threaded binary tree a binary tree that maintains a few extra variables for cheap and fast in order traversals segment tree can quickly compute a function over a portion of an array lazy propagation kd tree sparse table another take on quickly computing a function over a portion of an array but this time well make it even quicker heap a binary tree stored in an array so it doesnt use pointers makes a great priority queue fibonacci heap trie a special type of tree used to store associative data structures b tree a self balancing search tree in which nodes can have more than two children quadtree a tree with 4 children octree a tree with 8 children hashing hash table allows you to store and retrieve objects by a key this is how the dictionary type is usually implemented hash functions sets bloom filter a constant memory data structure that probabilistically tests whether an element is in a set hash set a set implemented using a hash table multiset a set where the number of times an element is added matters also known as a bag ordered set a set where the order of items matters graphs graph breadth first search bfs depth first search dfs shortest path on an unweighted tree single source shortest paths minimum spanning tree on an unweighted tree minimum spanning tree all pairs shortest paths dijkstras shortest path algorithm puzzles a lot of software developer interview questions consist of algorithmic puzzles here is a small selection of fun ones for more puzzles with answers see here and here two sum problem three sum four sum problem fizz buzz monty hall problem finding palindromes dining philosophers egg drop problem encoding and decoding binary tree learn more like what you see check out data structures algorithms in swift the official book by the swift algorithm club team youll start with the fundamental structures of linked lists queues and stacks and see how to implement them in a highly swift like way move on to working with various types of trees including general purpose trees binary trees avl trees binary search trees and tries go beyond bubble and insertion sort with better performing algorithms including mergesort radix sort heap sort and quicksort learn how to construct directed non directed and weighted graphs to represent many real world models and traverse graphs and trees efficiently with breadth first depth first dijkstras and prims algorithms to solve problems such as finding the shortest path or lowest cost in a network by the end of this book youll have hands on experience solving common issues with data structures and algorithms â€” and youll be well on your way to developing your own efficient and useful implementations you can find the book on the raywenderlich com store credits the swift algorithm club was originally created by matthijs hollemans it is now maintained by vincent ngo and kelvin lau the swift algorithm club is a collaborative effort from the most algorithmic members of the raywenderlich com community were always looking for help why not join the club license all content is licensed under the terms of the mit open source license by posting here or by submitting any pull request through this forum you agree that all content you submit or create both code and text is subject to this license razeware llc and others will have all the rights described in the license regarding this content the precise terms of this license may be found here