CocoaAsyncSocket CocoaAsyncSocket provides easy-to-use and powerful asynchronous socket libraries for Mac and iOS. The classes are described below. Installation CocoaPods Install using CocoaPods by adding this line to your Podfile: ruby use_frameworks! # Add this if you are targeting iOS 8+ or using Swift pod CocoaAsyncSocket Carthage CocoaAsyncSocket is Carthage compatible. To include it add the following line to your Cartfile bash github "robbiehanson/CocoaAsyncSocket" "master" The project is currently configured to build for iOS, tvOS and Mac. After building with carthage the resultant frameworks will be stored in: Carthage/Build/iOS/CocoaAsyncSocket.framework Carthage/Build/tvOS/CocoaAsyncSocket.framework Carthage/Build/Mac/CocoaAsyncSocket.framework Select the correct framework(s) and drag it into your project. Manual You can also include it into your project by adding the source files directly, but you should probably be using a dependency manager to keep up to date. Importing Using Objective-C: ```obj-c // When using iOS 8+ frameworks @import CocoaAsyncSocket; // OR when not using frameworks, targeting iOS 7 or below import "GCDAsyncSocket.h" // for TCP import "GCDAsyncUdpSocket.h" // for UDP ``` Using Swift: swift import CocoaAsyncSocket TCP GCDAsyncSocket is a TCP/IP socket networking library built atop Grand Central Dispatch. Here are the key features available: Native objective-c, fully self-contained in one class. No need to muck around with sockets or streams. This class handles everything for you. Full delegate support Errors, connections, read completions, write completions, progress, and disconnections all result in a call to your delegate method. Queued non-blocking reads and writes, with optional timeouts. You tell it what to read or write, and it handles everything for you. Queueing, buffering, and searching for termination sequences within the stream - all handled for you automatically. Automatic socket acceptance. Spin up a server socket, tell it to accept connections, and it will call you with new instances of itself for each connection. Support for TCP streams over IPv4 and IPv6. Automatically connect to IPv4 or IPv6 hosts. Automatically accept incoming connections over both IPv4 and IPv6 with a single instance of this class. No more worrying about multiple sockets. Support for TLS / SSL Secure your socket with ease using just a single method call. Available for both client and server sockets. Fully GCD based and Thread-Safe It runs entirely within its own GCD dispatch_queue, and is completely thread-safe. Further, the delegate methods are all invoked asynchronously onto a dispatch_queue of your choosing. This means parallel operation of your socket code, and your delegate/processing code. The Latest Technology & Performance Optimizations Internally the library takes advantage of technologies such as kqueues to limit system calls and optimize buffer allocations. In other words, peak performance. UDP GCDAsyncUdpSocket is a UDP/IP socket networking library built atop Grand Central Dispatch. Here are the key features available: Native objective-c, fully self-contained in one class. No need to muck around with low-level sockets. This class handles everything for you. Full delegate support. Errors, send completions, receive completions, and disconnections all result in a call to your delegate method. Queued non-blocking send and receive operations, with optional timeouts. You tell it what to send or receive, and it handles everything for you. Queueing, buffering, waiting and checking errno - all handled for you automatically. Support for IPv4 and IPv6. Automatically send/recv using IPv4 and/or IPv6. No more worrying about multiple sockets. Fully GCD based and Thread-Safe It runs entirely within its own GCD dispatch_queue, and is completely thread-safe. Further, the delegate methods are all invoked asynchronously onto a dispatch_queue of your choosing. This means parallel operation of your socket code, and your delegate/processing code. For those new(ish) to networking, its recommended you read the wiki.Sockets might not work exactly like you think they do... Still got questions? Try the CocoaAsyncSocket Mailing List. Love the project? Wanna buy me a ‚òïÔ∏è ? (or a üç∫ üòÄ ):