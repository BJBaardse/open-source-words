Handlebars.js Handlebars provides the power necessary to let you build semantic templates effectively with no frustration. Handlebars is largely compatible with Mustache templates. In most cases it is possible to swap out Mustache with Handlebars and continue using your current templates. Checkout the official Handlebars docs site at http://www.handlebarsjs.com and the live demo at http://tryhandlebarsjs.com/. Installing See our installation documentation. Usage In general, the syntax of Handlebars.js templates is a superset of Mustache templates. For basic syntax, check out the Mustache manpage. Once you have a template, use the Handlebars.compile method to compile the template into a function. The generated function takes a context argument, which will be used to render the template. ```js var source = "Hello, my name is {{name}}. I am from {{hometown}}. I have " + "{{kids.length}} kids:" + "{{#kids}}{{name}} is {{age}}{{/kids}}"; var template = Handlebars.compile(source); var data = { "name": "Alan", "hometown": "Somewhere, TX", "kids": [{"name": "Jimmy", "age": "12"}, {"name": "Sally", "age": "4"}]}; var result = template(data); // Would render: // Hello, my name is Alan. I am from Somewhere, TX. I have 2 kids: // // Jimmy is 12 // Sally is 4 // ``` Full documentation and more examples are at handlebarsjs.com. Precompiling Templates Handlebars allows templates to be precompiled and included as javascript code rather than the handlebars template allowing for faster startup time. Full details are located here. Differences Between Handlebars.js and Mustache Handlebars.js adds a couple of additional features to make writing templates easier and also changes a tiny detail of how partials work. Nested Paths Helpers Block Expressions Literal Values Delimited Comments Block expressions have the same syntax as mustache sections but should not be confused with one another. Sections are akin to an implicit each or with statement depending on the input data and helpers are explicit pieces of code that are free to implement whatever behavior they like. The mustache spec defines the exact behavior of sections. In the case of name conflicts, helpers are given priority. Compatibility There are a few Mustache behaviors that Handlebars does not implement. - Handlebars deviates from Mustache slightly in that it does not perform recursive lookup by default. The compile time compat flag must be set to enable this functionality. Users should note that there is a performance cost for enabling this flag. The exact cost varies by template, but its recommended that performance sensitive operations should avoid this mode and instead opt for explicit path references. - The optional Mustache-style lambdas are not supported. Instead Handlebars provides its own lambda resolution that follows the behaviors of helpers. - Handlebars does not allow space between the opening {{ and a command character such as #, / or >. The command character must immediately follow the braces, so for example {{> partial }} is allowed but {{ > partial }} is not. - Alternative delimiters are not supported. Supported Environments Handlebars has been designed to work in any ECMAScript 3 environment. This includes Node.js Chrome Firefox Safari 5+ Opera 11+ IE 6+ Older versions and other runtimes are likely to work but have not been formally tested. The compiler requires JSON.stringify to be implemented natively or via a polyfill. If using the precompiler this is not necessary. Performance In a rough performance test, precompiled Handlebars.js templates (in the original version of Handlebars.js) rendered in about half the time of Mustache templates. It would be a shame if it were any other way, since they were precompiled, but the difference in architecture does have some big performance advantages. Justin Marney, a.k.a. gotascii, confirmed that with an independent test. The rewritten Handlebars (current version) is faster than the old version, with many performance tests being 5 to 7 times faster than the Mustache equivalent. Upgrading See release-notes.md for upgrade notes. Known Issues See FAQ.md for known issues and common pitfalls. Handlebars in the Wild Assemble, by @jonschlinkert and @doowb, is a static site generator that uses Handlebars.js as its template engine. Cory, by @leo, is another tiny static site generator CoSchedule An editorial calendar for WordPress that uses Handlebars.js dashbars A modern helper library for Handlebars.js. Ember.js makes Handlebars.js the primary way to structure your views, also with automatic data binding support. Ghost Just a blogging platform. handlebars_assets: A Rails Asset Pipeline gem from Les Hill (@leshill). handlebars-helpers is an extensive library with 100+ handlebars helpers. handlebars-layouts is a set of helpers which implement extendible and embeddable layout blocks as seen in other popular templating languages. hbs: An Express.js view engine adapter for Handlebars.js, from Don Park. koa-hbs: koa generator based renderer for Handlebars.js. jblotus created http://tryhandlebarsjs.com for anyone who would like to try out Handlebars.js in their browser. jQuery plugin: allows you to use Handlebars.js with jQuery. Lumbar provides easy module-based template management for handlebars projects. Marionette.Handlebars adds support for Handlebars and Mustache templates to Marionette. sammy.js by Aaron Quint, a.k.a. quirkey, supports Handlebars.js as one of its template plugins. SproutCore uses Handlebars.js as its main templating engine, extending it with automatic data binding support. YUI implements a port of handlebars Swag by @elving is a growing collection of helpers for handlebars.js. Give your handlebars.js templates some swag son! DOMBars is a DOM-based templating engine built on the Handlebars parser and runtime DEPRECATED promised-handlebars is a wrapper for Handlebars that allows helpers to return Promises. just-handlebars-helpers A fully tested lightweight package with common Handlebars helpers. incremental-bars adds support for incremental-dom as template target to Handlebars. External Resources Gist about Synchronous and asynchronous loading of external handlebars templates Have a project using Handlebars? Send us a pull request! License Handlebars.js is released under the MIT license.