spf13 vim steve francias vim distribution this is a distribution of vim plugins and tools intended to be run on top of vim it is a good starting point for anyone intending to use vim for development unlike traditional vim plugin structure which similar to unix throws all files into common directories making updating or disabling plugins a real mess spf13 vim uses pathogen to have a well organized vim directory similar to macs app folders great care has been taken to ensure that each plugin plays nicely with others and optional configuration has been provided for what we believe is the most efficient use it heavily uses git submodules where possible for all plugins this makes for easy updating lastly and perhaps most importantly it is completely cross platform it works well on windows linux and osx without any modifications or additional configurations if you are using macvim or gvim additional features are enabled so regardless of your environment just clone and run pre requisites spf13 vim is built to be completely cross platform it works equally well on console vim as it does on gvim for windows nix or macvim spf13 vim is dependent on a semi recent version of vim and should work well on anything above vim 7 0 git is required for installation certain plugins require python or ruby support to be compiled into vim to check if you have python or ruby support run echo has ruby if it returns 1 your vim supports ruby installation easy installation nix only curl http j mp spf13 vim o sh or manual installation for i in vim vimrc gvimrc do e i mv i i old done git clone recursive git github com spf13 spf13 vim git i setup symlinks after this so i can maintain the repo outside of my actual config location use ln s on mac unix or mklink on windows cd ln s path to spf13 vim vimrc vimrc ln s path to spf13 vim vim vim updating to the latest version cd path to spf13 vim git pull git submodule sync git submodule update init recursive customization create vimrc local and gvimrc local for any local customizations for example to override the default color schemes echo color desert vimrc local echo color molokai gvimrc local fork me on github im always happy to take pull requests from others a good number of people have already contributed to spf13 vim go ahead and fork me spf13 vim features a highly optimized vimrc config file the vimrc file is suited to programming it is extremely well organized and folds in sections each section is labeled and each option is commented it fixes many of the inconveniences of vanilla vim including one config can be used across windows mac and linux eliminates swap and backup files from littering directories preferring to store in a central location fixes common typos like w q etc setup a solid set of settings for formatting change to meet your needs setup the interface to take advantage of vims features including omnicomplete line numbers syntax highlighting a better ruler status line more configuring included plugins plugins spf13 vim contains a curated set of popular vim plugins colors snippets and syntaxes great care has been made to ensure that these plugins play well together and have optimal configuration most of the bundles are git submodules facilitating easy updating and configuration piv php integration for vim snipmate nerdcommenter nerdtree supertab fugitive delimitmate matchit checksyntax surrounding autoclosetag nerdtree nerdtree is a file explorer plugin that provides project drawer functionality to your vim editing you can learn more about it with help nerdtree or checkout my post on nerdtree quickstart launch using leader e customizations spf13 vim adds a number of customizations to the core nerdtree use c e to toggle nerdtree use leader e or leader nt to load nerdtreefind which opens nerdtree where the current file is located ignore pyc \ swo swp git hg svn bzr files disallow eing files into the nerdtree buffer adding mirroring keep your nerdtree window in sync across your tabs on by default if nerdtree is open in the current tab open it in a new one in general assume that there is a single nerdtree buffer on the left and one or more editing buffers on the right command t the command t plug in provides an extremely fast intuitive mechanism for opening files with a minimal number of keystrokes its named command t because it is inspired by the go to file window bound to command t in textmate quickstart launch using leader t surround this plugin is a tool for dealing with pairs of surroundings examples of surroundings include parentheses quotes and html tags they are closely related to what vim refers to as text objects provided are mappings to allow for removing changing and adding surroundings details follow on the exact semantics but first consider the following examples an asterisk is used to denote the cursor position old text command new text hello world ds hello world 123 4 56 2 cs 123 456 2 look ma im html cs q q look ma im html q if x 3 ysw if x 3 my str whee vlllls my str whee for instance if the cursor was inside foo bar you could type cs to convert the text to foo bar theres a lot more check it out at help surround nerdcommenter nerdcommenter allows you to wrangle your code comments regardless of filetype view help nerdcommenter for all the details quickstart toggle comments using leader c space in visual or normal mode customizations spf13 vim binds command d to toggle comments supertab in insert mode start typing something and hit tab to tab complete based on the current context quickstart hit the tab key in insert mode snipmate snipmate provides snippet support similar to textmate a snippet is a piece of often typed text that you can insert into your document using a trigger word followed by a spf13 vim ships with a very large library of snippets for dozens of languages for instance in a c file using the default installation of snipmate vim if you type for in insert mode it will expand a typical for loop in c for i 0 i count i to go to the next item in the loop simply over to it if there is repeated code such as the i variable in this example you can simply start typing once its highlighted and all the matches specified in the snippet will be updated to go in reverse use quickstart type a keyword try something like class and hit tab in insert mode git support fugitive fugitive adds pervasive git support to git directories in vim for more information use help fugitive use gstatus to view git status and type on any file to stage or unstage it type p on a file to enter git add p and stage specific hunks in the file use gdiff on an open file to see what changes have been made to that file quickstart gstatus in command mode piv php integration for vim the most feature complete and up to date php integration for vim with proper support for php 5 3 including latest syntax functions better fold support etc piv provides php 5 3 support auto generation of php doc pd on function variable class definition line autocomplete of classes functions variables constants and language keywords better indenting full php documentation manual hit k on any function for full docs delimitmate delimitmate provides automatic closing of quotes parenthesis brackets etc besides some other related features that should make your time in insert mode a little bit easier most of the features can be modified or disabled permanently using global variables or on a filetype basis using autocommands with a couple of exceptions and limitations this features dont brake undo redo or history quickstart enabled by default just works see help delimitmate for options ack vim ack vim uses ack to search inside the current directory for a pattern you can learn more about it with help ack customizations spf13 vim rebinds command shift f d f to bring up ack align align lets you align statements on their equal signs make comment boxes align comments align declarations etc 5 10align to align lines 5 10 on s ctags spf13 vim includes the taglist plugin which binds tlist to an overview panel that lists all ctags for easy navigation customizations spf13 vim binds leader rt to the ctags command to update tags note for full language support run brew install ctags to install exuberant ctags tip check out help ctags for information about vims built in ctag support tag navigation creates a stack which can traversed via ctrl to find the source of a token and ctrl t to jump back up one level easytags automated tag generation and syntax highlighting in vim note depends on exuberant ctags on osx for full language support run brew install ctags to install exuberant ctags if you dont have ctags support disable this plugin quickstart ctrl while the cursor is on a keyword such as a function name to jump to its definition additional syntaxes spf13 vim ships with a few additional syntaxes markdown bound to markdown md and mk twig git commits set your editor to mvim f color schemes spf13 vim includes spf13 vim color pack ir black molokai peaksea use color molokai to switch to a color scheme snippets it also contains a very complete set of snippets for use with snipmate intro to vim heres some tips if youve never used vim before tutorials type vimtutor into a shell to go through a brief interactive tutorial inside vim read the slides at vim walking without crutches modes vim has two common modes insert mode stuff you type is added to the buffer normal mode keys you hit are interpreted as commands to enter insert mode hit i to exit insert mode hit esc useful commands use q to exit vim certain commands are prefixed with a leader key which by default maps to \ by default spf13 vim uses let mapleader to change this to which is in a consistent and convenient location keyboard cheat sheet