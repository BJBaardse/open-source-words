\ \ \ ladies and gentlemen \ o \ this is \ \ \ \ \ \ \ jgs \ \ \ \ \ \ introduction installation 2 1 requirements 2 2 installing syntastic with pathogen recommended settings faq 4 1 i installed syntastic but it isnt reporting any errors 4 2 syntastic supports several checkers for my filetype how do i tell it which one s to use 4 3 how can i run checkers for foreign filetypes against the current file 4 4 i have enabled multiple checkers for the current filetype how can i display all errors from all checkers together 4 5 how can i pass additional arguments to a checker 4 6 i run a checker and the location list is not updated 4 6 i run lopen or lwindow and the error window is empty 4 7 how can i jump between the different errors without using the location list at the bottom of the window 4 8 the error window is closed automatically when i quit the current buffer but not when i bdelete it 4 9 my favourite checker needs to load a configuration file from the projects root rather than the current directory 4 10 what is the difference between syntax checkers and style checkers 4 11 how can i check scripts written for different versions of python 4 12 how can i check scripts written for different versions of ruby 4 13 the perl checker has stopped working 4 14 what happened to the rustc checker 4 15 what happened to the tsc checker 4 16 what happened to the xcrun checker resources 1 introduction syntastic is a syntax checking plugin for vim created by martin grenfell it runs files through external syntax checkers and displays any resulting errors to the user this can be done on demand or automatically as files are saved if syntax errors are detected the user is notified and is happy because they didnt have to compile their code or execute their script to find them at the time of this writing syntastic has checking plugins for acpi source language actionscript ada ansible configurations api blueprint applescript asciidoc assembly languages bemhtml bro bourne shell c c c cabal chef cmake coffeescript coco coq css cucumber cuda d dart docbook dockerfile dust elixir erlang eruby fortran gentoo metadata glsl go haml haskell haxe handlebars hss html java javascript json jsx julia less lex limbo lisp llvm intermediate language lua markdown matlab mercury nasm nix objective c objective c ocaml perl perl 6 perl pod php gettext portable object os x and ios property lists pug formerly jade puppet python qml r racket rdf trig rdf turtle relax ng restructuredtext rpm spec ruby sass scss scala slim sml solidity sphinx sql stylus tcl tex texinfo twig typescript vala verilog vhdl vim help viml vue js xhtml xml xslt xquery yacc yaml yang data models yara rules z80 zope page templates and zsh see the manual for details about the corresponding supported checkers help syntastic checkers in vim a number of third party vim plugins also provide checkers for syntastic for example merlin omnisharp vim rust vim syntastic extras syntastic more tsuquyomi vim crystal vim eastwood and vim swift below is a screenshot showing the methods that syntastic uses to display syntax errors note that in practise you will only have a subset of these methods enabled errors are loaded into the location list for the corresponding window when the cursor is on a line containing an error the error message is echoed in the command window signs are placed beside lines with errors note that warnings are displayed in a different color there is a configurable statusline flag you can include in your statusline config hover the mouse over a line containing an error and the error message is displayed as a balloon not shown highlighting errors with syntax highlighting erroneous parts of lines can be highlighted 2 installation 2 1 requirements syntastic itself has rather relaxed requirements it doesnt have any external dependencies and it needs a version of vim compiled with a few common features autocmd eval file in path modify fname quickfix reltime statusline and user commands not all possible combinations of features that include the ones above make equal sense on all operating systems but vim version 7 or later with the normal big or huge feature sets should be fine syntastic should work with any modern plugin managers for vim such as neobundle pathogen vim addon manager vim plug or vundle instructions for installing syntastic with pathogen are included below for completeness starting with vim version 7 4 1486 you can also load syntastic using the standard mechanism of packages without the help of third party plugin managers see help packages in vim for details beware however that while support for packages has been added in vim 7 4 1384 the functionality needed by syntastic is present only in versions 7 4 1486 and later last but not least syntastic doesnt know how to do any syntax checks by itself in order to get meaningful results you need to install external checkers corresponding to the types of files you use please consult the manual help syntastic checkers in vim for a list of supported checkers 2 2 installing syntastic with pathogen if you already have pathogen working then skip step 1 and go to step 2 2 2 1 step 1 install pathogen vim first ill show you how to install tim popes pathogen so that its easy to install syntastic do this in your terminal so that you get the pathogen vim file and the directories it needs sh mkdir p vim autoload vim bundle \ curl lsso vim autoload pathogen vim https tpo pe pathogen vim next you need to add this to your vimrc vim execute pathogen infect 2 2 2 step 2 install syntastic as a pathogen bundle you now have pathogen installed and can put syntastic into vim bundle like this sh cd vim bundle \ git clone depth 1 https github com vim syntastic syntastic git quit vim and start it back up to reload it then type vim helptags if you get an error when you do this then you probably didnt install pathogen right go back to step 1 and make sure you did the following created both the vim autoload and vim bundle directories added the execute pathogen infect line to your vimrc file did the git clone of syntastic inside vim bundle have permissions to access all of these directories 3 recommended settings syntastic has numerous options that can be configured and the defaults are not particularly well suitable for new users it is recommended that you start by adding the following lines to your vimrc file and return to them after reading the manual see help syntastic in vim vim set statusline warningmsg set statusline syntasticstatuslineflag set statusline let g syntastic always populate loc list 1 let g syntastic auto loc list 1 let g syntastic check on open 1 let g syntastic check on wq 0 4 faq 4 1 q i installed syntastic but it isnt reporting any errors a the most likely reason is that none of the syntax checkers that it requires are installed for example by default python requires either flake8 or pylint to be installed and in your path read the manual help syntastic checkers in vim to find out what executables are supported note that aliases do not work the actual executables must be available in your path symbolic links are okay though you can see syntastics idea of available checkers by running syntasticinfo a second probable reason is that none of the available checkers are enabled syntastic comes preconfigured with a default list of enabled checkers per filetype but this list is kept short in order to prevent slowing down vim or trying to run conflicting checks the command syntasticinfo will show you which checkers are enabled you can tell syntastic which checkers among the available ones you want to run by setting g syntastic filetype checkers in your vimrc see below a third possible reason is that the path seen by syntastic might not be same as the path in your login shell syntastic runs checkers using the shell pointed to by vims shell or by g syntastic shell if set and thats the shell you need to configure to set the proper path and environment variables for your checkers you can see syntastics idea of path by running vim echo syntastic util system echo path on unix and mac os x systems or vim echo syntastic util system echo path on windows finally another reason it could fail is that either the command line options or the error output for a syntax checker may have changed in this case make sure you have the latest version of the syntax checker installed if it still fails then post an issue or better yet create a pull request 4 2 q syntastic supports several checkers for my filetype how do i tell it which one s to use a add a line like this to your vimrc vim let g syntastic filetype checkers checker name to see the list of supported checkers for your filetype read the manual help syntastic checkers in vim for example python has the following checkers among others flake8 pyflakes pylint and a native python checker to tell syntastic to use pylint you would use this setting vim let g syntastic python checkers pylint checkers can be chained together like this vim let g syntastic php checkers php phpcs phpmd this is telling syntastic to run the php checker first and if no errors are found run phpcs and then phpmd you can also run checkers explicitly by calling syntasticcheck checker for example to run phpcs and phpmd vim syntasticcheck phpcs phpmd this works for any checkers available for the current filetype even if they arent listed in g syntastic filetype checkers 4 3 q how can i run checkers for foreign filetypes against the current file a you need to qualify the name of the foreign checker with the name of its filetype for example to check tex files with the checker language check which normally acts only on files of type text you can add text language check to the list fo checkers for tex vim let g syntastic tex checkers lacheck text language check this also works with syntasticcheck e g the following command runs text language check against the current file regardless of the current filetype vim syntasticcheck text language check of course the checkers specified this way need to be known to syntastic and they need to be shown as available when you run syntasticinfo you cant just make up a combination of a filetype and a program name and expect it to work as a checker 4 4 q i have enabled multiple checkers for the current filetype how can i display all errors from all checkers together a set g syntastic aggregate errors to 1 in your vimrc vim let g syntastic aggregate errors 1 see help syntastic aggregating errors for more details 4 5 q how can i pass additional arguments to a checker a in most cases a command line is constructed using an internal function named makeprgbuild which provides a number of options that allow you to customise every part of the command that gets run you can set these options using global variables the general form of the global args variable is syntastic filetype checker args thus if you wanted to pass my args here to the ruby mri checker you would add this line to your vimrc vim let g syntastic ruby mri args my args here see help syntastic checker options for more information a number of checkers dont use the makeprgbuild function mentioned above or have additional options that can be configured for these checkers the exact list of options should be included in the manual help syntastic checkers in vim 4 6 q i run a checker and the location list is not updated 4 6 q i run lopen or lwindow and the error window is empty a by default the location list is changed only when you run the errors command in order to minimise conflicts with other plugins if you want the location list to always be updated when you run the checkers add this line to your vimrc vim let g syntastic always populate loc list 1 4 7 q how can i jump between the different errors without using the location list at the bottom of the window a vim provides several built in commands for this see help lnext and help lprevious if you use these commands a lot then you may want to add shortcut mappings to your vimrc or install something like unimpaired which provides such mappings among other things 4 8 q the error window is closed automatically when i quit the current buffer but not when i bdelete it a there is no safe way to handle that situation automatically but you can work around it vim nnoremap silent c d lclose cr bdelete cr cabbrev silent bd c r getcmdtype getcmdpos 1 lclose\ bdelete bd cr 4 9 my favourite checker needs to load a configuration file from the projects root rather than the current directory a you can set up an autocmd to search for the configuration file in the current directory and upwards and add it to the checkers options when found for example for jscs vim function findconfig prefix what where let cfg findfile a what escape a where return cfg a prefix shellescape cfg endfunction autocmd filetype javascript let b syntastic javascript jscs args \ get g syntastic javascript jscs args \ findconfig c jscsrc expand p h 1 4 10 q what is the difference between syntax checkers and style checkers a the errors and warnings they produce are highlighted differently and can be filtered by different rules but otherwise the distinction is pretty much arbitrary there is an ongoing effort to keep things consistent so you can generally expect messages produced by syntax checkers to be mostly related to syntax and messages produced by style checkers to be mostly about style but there can be no formal guarantee that say a style checker that runs into a syntax error wouldnt die with a fatal message nor that a syntax checker wouldnt give you warnings against using some constructs as being bad practice there is also no guarantee that messages marked as style are less severe than the ones marked as syntax whatever that might mean and there are even a few frankenstein checkers for example flake8 and pylama that by their nature produce both kinds of messages syntastic is not smart enough to be able to sort out these things by itself generally its more useful to look at this from the perspective of filtering unwanted messages rather than as an indicator of severity levels the distinction between syntax and style is orthogonal to the distinction between errors and warnings and thus you can turn off messages based on level on type or both e g to disable all style messages vim let g syntastic quiet messages type style see help syntastic quiet messages for more information 4 11 q how can i check scripts written for different versions of python a install a python version manager such as virtualenv or pyenv activate the environment for the relevant version of python and install in it the checkers you want to use set g syntastic python checkers accordingly in your vimrc and run vim from the virtual environment if youre starting vim from a desktop manager rather than from a terminal you might need to write wrapper scripts around your checkers to activate the virtual environment before running the actual checks then youll need to point the relevant g syntastic python checker exec variables to the wrapper scripts 4 12 q how can i check scripts written for different versions of ruby a install a ruby version manager such as rvm or rbenv activate the relevant version of ruby and install in it the checkers you want to use set g syntastic ruby checkers accordingly in your vimrc and run vim under the relevant ruby version if youre starting vim from a desktop manager rather than from a terminal and depending on the version manager you use you might need to write wrapper scripts around your checkers to activate the relevant version of ruby before running the actual checks then youll need to point the relevant g syntastic ruby checker exec variables to the wrapper scripts 4 13 q the perl checker has stopped working a the perl checker runs perl c against your file which in turn executes any begin unitcheck and check blocks and any use statements in your file cf perlrun this is probably fine if you wrote the file yourself but its a security problem if youre checking third party files since there is currently no way to disable this behaviour while still producing useful results the checker is now disabled by default to re enable it make sure the g syntastic perl checkers list includes perl and set g syntastic enable perl checker to 1 in your vimrc vim let g syntastic enable perl checker 1 4 14 q what happened to the rustc checker a it is now part of the rust vim plugin if you install this plugin the checker should be picked up automatically by syntastic 4 15 q what happened to the tsc checker a it didnt meet peoples expectations and it has been removed the plugin tsuquyomi comes packaged with a checker for typescript if you install this plugin the checker should be picked up automatically by syntastic 4 16 q what happened to the xcrun checker a the xcrun checker used to have a security problem and it has been removed a better checker for swift is part of the vim swift plugin if you install this plugin the checker should be picked up automatically by syntastic 5 resources the preferred place for posting suggestions reporting bugs and general discussions related to syntastic is the issue tracker at github a guide for writing syntax checkers can be found in the wiki there are also a dedicated google group and a syntastic tag at stackoverflow syntastic aims to provide a common interface to syntax checkers for as many languages as possible for particular languages there are of course other plugins that provide more functionality than syntastic you might want to take a look at ghcmod vim jedi vim python mode vim go or youcompleteme vim tw 79 sw 4